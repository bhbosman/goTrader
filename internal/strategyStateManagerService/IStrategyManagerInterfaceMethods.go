// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bhbosman/goTrader/internal/strategyManager (interfaces: IStrategyManager)

// Package strategyManager is a generated GoMock package.
package strategyStateManagerService

import (
	fmt "fmt"

	errors "github.com/bhbosman/gocommon/errors"
	"golang.org/x/net/context"
)

// Interface A Comment
// Interface github.com/bhbosman/goTrader/internal/strategyManager
// Interface IStrategyManager
// Interface IStrategyManager, Method: MultiSend
type IStrategyManagerMultiSendIn struct {
	arg0 []interface{}
}

type IStrategyManagerMultiSendOut struct {
}
type IStrategyManagerMultiSendError struct {
	InterfaceName string
	MethodName    string
	Reason        string
}

func (self *IStrategyManagerMultiSendError) Error() string {
	return fmt.Sprintf("error in data coming back from %v::%v. Reason: %v", self.InterfaceName, self.MethodName, self.Reason)
}

type IStrategyManagerMultiSend struct {
	inData         IStrategyManagerMultiSendIn
	outDataChannel chan IStrategyManagerMultiSendOut
}

func NewIStrategyManagerMultiSend(waitToComplete bool, arg0 ...interface{}) *IStrategyManagerMultiSend {
	var outDataChannel chan IStrategyManagerMultiSendOut
	if waitToComplete {
		outDataChannel = make(chan IStrategyManagerMultiSendOut)
	} else {
		outDataChannel = nil
	}
	return &IStrategyManagerMultiSend{
		inData: IStrategyManagerMultiSendIn{
			arg0: arg0,
		},
		outDataChannel: outDataChannel,
	}
}

func (self *IStrategyManagerMultiSend) Wait(onError func(interfaceName string, methodName string, err error) error) (IStrategyManagerMultiSendOut, error) {
	data, ok := <-self.outDataChannel
	if !ok {
		generatedError := &IStrategyManagerMultiSendError{
			InterfaceName: "IStrategyManager",
			MethodName:    "MultiSend",
			Reason:        "Channel for IStrategyManager::MultiSend returned false",
		}
		if onError != nil {
			err := onError("IStrategyManager", "MultiSend", generatedError)
			return IStrategyManagerMultiSendOut{}, err
		} else {
			return IStrategyManagerMultiSendOut{}, generatedError
		}
	}
	return data, nil
}

func (self *IStrategyManagerMultiSend) Close() error {
	close(self.outDataChannel)
	return nil
}
func CallIStrategyManagerMultiSend(context context.Context, channel chan<- interface{}, waitToComplete bool, arg0 ...interface{}) (IStrategyManagerMultiSendOut, error) {
	if context != nil && context.Err() != nil {
		return IStrategyManagerMultiSendOut{}, context.Err()
	}
	data := NewIStrategyManagerMultiSend(waitToComplete, arg0...)
	if waitToComplete {
		defer func(data *IStrategyManagerMultiSend) {
			err := data.Close()
			if err != nil {
			}
		}(data)
	}
	if context != nil && context.Err() != nil {
		return IStrategyManagerMultiSendOut{}, context.Err()
	}
	channel <- data
	var err error
	var v IStrategyManagerMultiSendOut
	if waitToComplete {
		v, err = data.Wait(func(interfaceName string, methodName string, err error) error {
			return err
		})
	} else {
		err = errors.NoWaitOperationError
	}
	if err != nil {
		return IStrategyManagerMultiSendOut{}, err
	}
	return v, nil
}

// Interface IStrategyManager, Method: Send
type IStrategyManagerSendIn struct {
	arg0 interface{}
}

type IStrategyManagerSendOut struct {
	Args0 error
}
type IStrategyManagerSendError struct {
	InterfaceName string
	MethodName    string
	Reason        string
}

func (self *IStrategyManagerSendError) Error() string {
	return fmt.Sprintf("error in data coming back from %v::%v. Reason: %v", self.InterfaceName, self.MethodName, self.Reason)
}

type IStrategyManagerSend struct {
	inData         IStrategyManagerSendIn
	outDataChannel chan IStrategyManagerSendOut
}

func NewIStrategyManagerSend(waitToComplete bool, arg0 interface{}) *IStrategyManagerSend {
	var outDataChannel chan IStrategyManagerSendOut
	if waitToComplete {
		outDataChannel = make(chan IStrategyManagerSendOut)
	} else {
		outDataChannel = nil
	}
	return &IStrategyManagerSend{
		inData: IStrategyManagerSendIn{
			arg0: arg0,
		},
		outDataChannel: outDataChannel,
	}
}

func (self *IStrategyManagerSend) Wait(onError func(interfaceName string, methodName string, err error) error) (IStrategyManagerSendOut, error) {
	data, ok := <-self.outDataChannel
	if !ok {
		generatedError := &IStrategyManagerSendError{
			InterfaceName: "IStrategyManager",
			MethodName:    "Send",
			Reason:        "Channel for IStrategyManager::Send returned false",
		}
		if onError != nil {
			err := onError("IStrategyManager", "Send", generatedError)
			return IStrategyManagerSendOut{}, err
		} else {
			return IStrategyManagerSendOut{}, generatedError
		}
	}
	return data, nil
}

func (self *IStrategyManagerSend) Close() error {
	close(self.outDataChannel)
	return nil
}
func CallIStrategyManagerSend(context context.Context, channel chan<- interface{}, waitToComplete bool, arg0 interface{}) (IStrategyManagerSendOut, error) {
	if context != nil && context.Err() != nil {
		return IStrategyManagerSendOut{}, context.Err()
	}
	data := NewIStrategyManagerSend(waitToComplete, arg0)
	if waitToComplete {
		defer func(data *IStrategyManagerSend) {
			err := data.Close()
			if err != nil {
			}
		}(data)
	}
	if context != nil && context.Err() != nil {
		return IStrategyManagerSendOut{}, context.Err()
	}
	channel <- data
	var err error
	var v IStrategyManagerSendOut
	if waitToComplete {
		v, err = data.Wait(func(interfaceName string, methodName string, err error) error {
			return err
		})
	} else {
		err = errors.NoWaitOperationError
	}
	if err != nil {
		return IStrategyManagerSendOut{}, err
	}
	return v, nil
}

func ChannelEventsForIStrategyManager(next IStrategyStateManager, event interface{}) (bool, error) {
	switch v := event.(type) {
	case *IStrategyManagerMultiSend:
		data := IStrategyManagerMultiSendOut{}
		next.MultiSend(v.inData.arg0...)
		if v.outDataChannel != nil {
			v.outDataChannel <- data
		}
		return true, nil
	case *IStrategyManagerSend:
		data := IStrategyManagerSendOut{}
		data.Args0 = next.Send(v.inData.arg0)
		if v.outDataChannel != nil {
			v.outDataChannel <- data
		}
		return true, nil
	default:
		return false, nil
	}
}
