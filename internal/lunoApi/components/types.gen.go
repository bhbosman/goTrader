// Package components provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package components

import (
	"encoding/json"
	"fmt"
)

// Defines values for CancelWithdrawalResponseStatus.
const (
	CancelWithdrawalResponseStatusCANCELLED  CancelWithdrawalResponseStatus = "CANCELLED"
	CancelWithdrawalResponseStatusCANCELLING CancelWithdrawalResponseStatus = "CANCELLING"
	CancelWithdrawalResponseStatusCOMPLETED  CancelWithdrawalResponseStatus = "COMPLETED"
	CancelWithdrawalResponseStatusPENDING    CancelWithdrawalResponseStatus = "PENDING"
	CancelWithdrawalResponseStatusPROCESSING CancelWithdrawalResponseStatus = "PROCESSING"
	CancelWithdrawalResponseStatusUNKNOWN    CancelWithdrawalResponseStatus = "UNKNOWN"
	CancelWithdrawalResponseStatusWAITING    CancelWithdrawalResponseStatus = "WAITING"
)

// Defines values for CreateWithdrawalResponseStatus.
const (
	CreateWithdrawalResponseStatusCANCELLED  CreateWithdrawalResponseStatus = "CANCELLED"
	CreateWithdrawalResponseStatusCANCELLING CreateWithdrawalResponseStatus = "CANCELLING"
	CreateWithdrawalResponseStatusCOMPLETED  CreateWithdrawalResponseStatus = "COMPLETED"
	CreateWithdrawalResponseStatusPENDING    CreateWithdrawalResponseStatus = "PENDING"
	CreateWithdrawalResponseStatusPROCESSING CreateWithdrawalResponseStatus = "PROCESSING"
	CreateWithdrawalResponseStatusUNKNOWN    CreateWithdrawalResponseStatus = "UNKNOWN"
	CreateWithdrawalResponseStatusWAITING    CreateWithdrawalResponseStatus = "WAITING"
)

// Defines values for FundsMoveStatus.
const (
	FundsMoveStatusCREATED    FundsMoveStatus = "CREATED"
	FundsMoveStatusFAILED     FundsMoveStatus = "FAILED"
	FundsMoveStatusMOVING     FundsMoveStatus = "MOVING"
	FundsMoveStatusSUCCESSFUL FundsMoveStatus = "SUCCESSFUL"
)

// Defines values for GetMoveResponseStatus.
const (
	GetMoveResponseStatusCREATED    GetMoveResponseStatus = "CREATED"
	GetMoveResponseStatusFAILED     GetMoveResponseStatus = "FAILED"
	GetMoveResponseStatusMOVING     GetMoveResponseStatus = "MOVING"
	GetMoveResponseStatusSUCCESSFUL GetMoveResponseStatus = "SUCCESSFUL"
)

// Defines values for GetOrder2ResponseSide.
const (
	GetOrder2ResponseSideBUY  GetOrder2ResponseSide = "BUY"
	GetOrder2ResponseSideSELL GetOrder2ResponseSide = "SELL"
)

// Defines values for GetOrder2ResponseStatus.
const (
	GetOrder2ResponseStatusAWAITING GetOrder2ResponseStatus = "AWAITING"
	GetOrder2ResponseStatusCOMPLETE GetOrder2ResponseStatus = "COMPLETE"
	GetOrder2ResponseStatusPENDING  GetOrder2ResponseStatus = "PENDING"
)

// Defines values for GetOrder2ResponseStopDirection.
const (
	GetOrder2ResponseStopDirectionABOVE GetOrder2ResponseStopDirection = "ABOVE"
	GetOrder2ResponseStopDirectionBELOW GetOrder2ResponseStopDirection = "BELOW"
)

// Defines values for GetOrder2ResponseType.
const (
	GetOrder2ResponseTypeLIMIT     GetOrder2ResponseType = "LIMIT"
	GetOrder2ResponseTypeMARKET    GetOrder2ResponseType = "MARKET"
	GetOrder2ResponseTypeSTOPLIMIT GetOrder2ResponseType = "STOP_LIMIT"
)

// Defines values for GetOrderResponseState.
const (
	GetOrderResponseStateCOMPLETE GetOrderResponseState = "COMPLETE"
	GetOrderResponseStatePENDING  GetOrderResponseState = "PENDING"
)

// Defines values for GetOrderResponseType.
const (
	GetOrderResponseTypeASK  GetOrderResponseType = "ASK"
	GetOrderResponseTypeBID  GetOrderResponseType = "BID"
	GetOrderResponseTypeBUY  GetOrderResponseType = "BUY"
	GetOrderResponseTypeSELL GetOrderResponseType = "SELL"
)

// Defines values for GetTickerResponseStatus.
const (
	GetTickerResponseStatusACTIVE   GetTickerResponseStatus = "ACTIVE"
	GetTickerResponseStatusDISABLED GetTickerResponseStatus = "DISABLED"
	GetTickerResponseStatusPOSTONLY GetTickerResponseStatus = "POSTONLY"
)

// Defines values for GetWithdrawalResponseStatus.
const (
	GetWithdrawalResponseStatusCANCELLED  GetWithdrawalResponseStatus = "CANCELLED"
	GetWithdrawalResponseStatusCANCELLING GetWithdrawalResponseStatus = "CANCELLING"
	GetWithdrawalResponseStatusCOMPLETED  GetWithdrawalResponseStatus = "COMPLETED"
	GetWithdrawalResponseStatusPENDING    GetWithdrawalResponseStatus = "PENDING"
	GetWithdrawalResponseStatusPROCESSING GetWithdrawalResponseStatus = "PROCESSING"
	GetWithdrawalResponseStatusUNKNOWN    GetWithdrawalResponseStatus = "UNKNOWN"
	GetWithdrawalResponseStatusWAITING    GetWithdrawalResponseStatus = "WAITING"
)

// Defines values for MarketInfoTradingStatus.
const (
	MarketInfoTradingStatusACTIVE    MarketInfoTradingStatus = "ACTIVE"
	MarketInfoTradingStatusPOSTONLY  MarketInfoTradingStatus = "POST_ONLY"
	MarketInfoTradingStatusSUSPENDED MarketInfoTradingStatus = "SUSPENDED"
)

// Defines values for MoveResponseStatus.
const (
	CREATED    MoveResponseStatus = "CREATED"
	FAILED     MoveResponseStatus = "FAILED"
	MOVING     MoveResponseStatus = "MOVING"
	SUCCESSFUL MoveResponseStatus = "SUCCESSFUL"
)

// Defines values for OrderState.
const (
	OrderStateCOMPLETE OrderState = "COMPLETE"
	OrderStatePENDING  OrderState = "PENDING"
)

// Defines values for OrderType.
const (
	OrderTypeASK  OrderType = "ASK"
	OrderTypeBID  OrderType = "BID"
	OrderTypeBUY  OrderType = "BUY"
	OrderTypeSELL OrderType = "SELL"
)

// Defines values for OrderV2Side.
const (
	OrderV2SideBUY  OrderV2Side = "BUY"
	OrderV2SideSELL OrderV2Side = "SELL"
)

// Defines values for OrderV2Status.
const (
	OrderV2StatusAWAITING OrderV2Status = "AWAITING"
	OrderV2StatusCOMPLETE OrderV2Status = "COMPLETE"
	OrderV2StatusPENDING  OrderV2Status = "PENDING"
)

// Defines values for OrderV2StopDirection.
const (
	OrderV2StopDirectionABOVE OrderV2StopDirection = "ABOVE"
	OrderV2StopDirectionBELOW OrderV2StopDirection = "BELOW"
)

// Defines values for OrderV2Type.
const (
	OrderV2TypeLIMIT     OrderV2Type = "LIMIT"
	OrderV2TypeMARKET    OrderV2Type = "MARKET"
	OrderV2TypeSTOPLIMIT OrderV2Type = "STOP_LIMIT"
)

// Defines values for TickerStatus.
const (
	ACTIVE   TickerStatus = "ACTIVE"
	DISABLED TickerStatus = "DISABLED"
	POSTONLY TickerStatus = "POSTONLY"
)

// Defines values for TradeV2Type.
const (
	ASK TradeV2Type = "ASK"
	BID TradeV2Type = "BID"
)

// Defines values for TransactionKind.
const (
	EXCHANGE TransactionKind = "EXCHANGE"
	FEE      TransactionKind = "FEE"
	INTEREST TransactionKind = "INTEREST"
	TRANSFER TransactionKind = "TRANSFER"
)

// Defines values for WithdrawalStatus.
const (
	WithdrawalStatusCANCELLED  WithdrawalStatus = "CANCELLED"
	WithdrawalStatusCANCELLING WithdrawalStatus = "CANCELLING"
	WithdrawalStatusCOMPLETED  WithdrawalStatus = "COMPLETED"
	WithdrawalStatusPENDING    WithdrawalStatus = "PENDING"
	WithdrawalStatusPROCESSING WithdrawalStatus = "PROCESSING"
	WithdrawalStatusUNKNOWN    WithdrawalStatus = "UNKNOWN"
	WithdrawalStatusWAITING    WithdrawalStatus = "WAITING"
)

// AccountBalance defines model for AccountBalance.
type AccountBalance struct {
	// ID of the account.
	AccountId *string `json:"account_id,omitempty"`

	// Currency code for the asset held in this account.
	Asset *string `json:"asset,omitempty"`

	// The amount available to send or trade.
	Balance *string `json:"balance,omitempty"`

	// The name set by the user upon creating the account.
	Name *string `json:"name,omitempty"`

	// Amount locked by Luno and cannot be sent or traded. This could be due to
	// open orders.
	Reserved *string `json:"reserved,omitempty"`

	// Amount that is awaiting some sort of verification to be credited to this
	// account. This could be an on-chain transaction that Luno is waiting for
	// further block verifications to happen.
	Unconfirmed *string `json:"unconfirmed,omitempty"`
}

// AddressMeta defines model for AddressMeta.
type AddressMeta struct {
	Label *string `json:"label,omitempty"`
	Value *string `json:"value,omitempty"`
}

// CancelWithdrawalResponse response
type CancelWithdrawalResponse struct {
	// Amount to withdraw
	Amount *string `json:"amount,omitempty"`

	// Unix time the withdrawal was initiated, in milliseconds
	CreatedAt *string `json:"created_at,omitempty"`

	// Withdrawal currency.
	Currency *string `json:"currency,omitempty"`

	// External ID has the value that was passed in when the Withdrawal request was posted.
	ExternalID *string `json:"external_id,omitempty"`

	// Withdrawal fee
	Fee *string `json:"fee,omitempty"`
	ID  *string `json:"id,omitempty"`

	// Status
	Status *CancelWithdrawalResponseStatus `json:"status,omitempty"`

	// Type distinguishes between different withdrawal methods where more than one is supported
	// for the given currency.
	Type *string `json:"type,omitempty"`
}

// Status
type CancelWithdrawalResponseStatus string

// Candle defines model for Candle.
type Candle struct {
	// Closing price
	Close *string `json:"close,omitempty"`

	// High price
	High *string `json:"high,omitempty"`

	// Low price
	Low *string `json:"low,omitempty"`

	// Opening price
	Open *string `json:"open,omitempty"`

	// Unix timestamp in milliseconds
	Start *string `json:"timestamp,omitempty"`

	// Volume traded
	Volume *string `json:"volume,omitempty"`
}

// CreateWithdrawalResponse response
type CreateWithdrawalResponse struct {
	// Amount to withdraw
	Amount *string `json:"amount,omitempty"`

	// Unix time the withdrawal was initiated, in milliseconds
	CreatedAt *string `json:"created_at,omitempty"`

	// Withdrawal currency.
	Currency *string `json:"currency,omitempty"`

	// External ID has the value that was passed in when the Withdrawal request was posted.
	ExternalID *string `json:"external_id,omitempty"`

	// Withdrawal fee
	Fee *string `json:"fee,omitempty"`
	ID  *string `json:"id,omitempty"`

	// Status
	Status *CreateWithdrawalResponseStatus `json:"status,omitempty"`

	// Type distinguishes between different withdrawal methods where more than one is supported
	// for the given currency.
	Type *string `json:"type,omitempty"`
}

// Status
type CreateWithdrawalResponseStatus string

// CryptoDetails contains a transaction's cryptocurrency address
// and transaction id
type CryptoDetails struct {
	Address *string `json:"address,omitempty"`
	TxID    *string `json:"txid,omitempty"`
}

// DetailFields defines model for DetailFields.
type DetailFields struct {
	// CryptoDetails contains a transaction's cryptocurrency address
	// and transaction id
	CryptoDetails *CryptoDetails `json:"crypto_details,omitempty"`

	// TradeDetails contains a transaction volume, price and pair
	TradeDetails *TradeDetails `json:"trade_details,omitempty"`
}

// FundsMove defines model for FundsMove.
type FundsMove struct {
	// The assets quantity to move from the debit account to credit account. This is always a positive value.
	Amount *string `json:"amount,omitempty"`

	// User defined unique ID
	ClientMoveID *string `json:"client_move_id,omitempty"`

	// Unix time the move was initiated, in milliseconds
	CreatedAt *string `json:"created_at,omitempty"`

	// The account to credit the funds to.
	CreditAccountID *string `json:"credit_account_id,omitempty"`

	// The account to debit the funds from.
	DebitAccountID *string `json:"debit_account_id,omitempty"`

	// Unique ID, defined by Luno
	ID *string `json:"id,omitempty"`

	// Current status of the move.
	//
	// Status meaning:<br>
	// <code>CREATED</code> The move is awaiting execution.<br>
	// <code>MOVING</code> The funds have been reserved and the move is being executed.<br>
	// <code>SUCCESSFUL</code> The move has completed successfully and should be reflected in both accounts available
	// balance.<br>
	// <code>FAILED</code> The move has failed. There could be many reasons for this but the most likely is that the
	// debit account doesn't have enough available funds to move.<br>
	Status *FundsMoveStatus `json:"status,omitempty"`

	// Unix time the move was last updated, in milliseconds
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// Current status of the move.
//
// Status meaning:<br>
// <code>CREATED</code> The move is awaiting execution.<br>
// <code>MOVING</code> The funds have been reserved and the move is being executed.<br>
// <code>SUCCESSFUL</code> The move has completed successfully and should be reflected in both accounts available
// balance.<br>
// <code>FAILED</code> The move has failed. There could be many reasons for this but the most likely is that the
// debit account doesn't have enough available funds to move.<br>
type FundsMoveStatus string

// GetCandlesResponse response
type GetCandlesResponse struct {
	Candles *[]Candle `json:"candles,omitempty"`

	// Duration in seconds
	Duration *int64  `json:"duration,omitempty"`
	Pair     *string `json:"pair,omitempty"`
}

// GetMoveResponse response for GET /1/move
type GetMoveResponse struct {
	// The assets quantity to move from the debit account to credit account. This is always a positive value.
	Amount *string `json:"amount,omitempty"`

	// User defined unique ID
	ClientMoveID *string `json:"client_move_id,omitempty"`

	// Unix time the move was initiated, in milliseconds
	CreatedAt *string `json:"created_at,omitempty"`

	// The account to credit the funds to.
	CreditAccountID *string `json:"credit_account_id,omitempty"`

	// The account to debit the funds from.
	DebitAccountID *string `json:"debit_account_id,omitempty"`

	// Unique ID, defined by Luno
	ID *string `json:"id,omitempty"`

	// Current status of the move.
	//
	// Status meaning:<br>
	// <code>CREATED</code> The move is awaiting execution.<br>
	// <code>MOVING</code> The funds have been reserved and the move is being executed.<br>
	// <code>SUCCESSFUL</code> The move has completed successfully and should be reflected in both accounts available
	// balance.<br>
	// <code>FAILED</code> The move has failed. There could be many reasons for this but the most likely is that the
	// debit account doesn't have enough available funds to move.<br>
	Status *GetMoveResponseStatus `json:"status,omitempty"`

	// Unix time the move was last updated, in milliseconds
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// Current status of the move.
//
// Status meaning:<br>
// <code>CREATED</code> The move is awaiting execution.<br>
// <code>MOVING</code> The funds have been reserved and the move is being executed.<br>
// <code>SUCCESSFUL</code> The move has completed successfully and should be reflected in both accounts available
// balance.<br>
// <code>FAILED</code> The move has failed. There could be many reasons for this but the most likely is that the
// debit account doesn't have enough available funds to move.<br>
type GetMoveResponseStatus string

// GetOrder2Response response
type GetOrder2Response struct {
	// Amount of base filled, this value is always positive.
	//
	// Use this field and `side` to determine credit or debit of funds.
	Base *string `json:"base,omitempty"`

	// Client Order ID has the value that was passed in when the Order was posted.
	ClientOrderID *string `json:"client_order_id,omitempty"`

	// Time of order completion (Unix milliseconds)
	//
	// This value is set at the time of this order leaving the order book,
	// either immediately upon posting or later on due to a trade or cancellation.
	// Whilst the order is still pending/live it will be 0.
	CompletedTimestamp *string `json:"completed_timestamp,omitempty"`

	// Amount of counter filled, this value is always positive.
	//
	// Use this field and `side` to determine credit or debit of funds.
	Counter *string `json:"counter,omitempty"`

	// Time of order creation (Unix milliseconds)
	CreationTimestamp *string `json:"creation_timestamp,omitempty"`

	// Time of order expiration (Unix milliseconds)
	//
	// This value is set at the time of processing a request from you to cancel the order, otherwise it will be 0.
	ExpirationTimestamp *string `json:"expiration_timestamp,omitempty"`

	// Base amount of fees to be charged
	FeeBase *string `json:"fee_base,omitempty"`

	// Counter amount of fees to be charged
	FeeCounter *string `json:"fee_counter,omitempty"`

	// Limit price to transact
	LimitPrice *string `json:"limit_price,omitempty"`

	// Limit volume to transact
	LimitVolume *string `json:"limit_volume,omitempty"`

	// The order reference
	Ref *string `json:"order_id,omitempty"`

	// Specifies the market
	Pair *string `json:"pair,omitempty"`

	// The intention of the order, whether to buy or sell funds in the market.
	//
	// You can use this to determine the flow of funds in the order.
	Side *GetOrder2ResponseSide `json:"side,omitempty"`

	// The current state of the order
	//
	// Status meaning:<br>
	// <code>AWAITING</code> The order is awaiting to enter the order book.<br>
	// <code>PENDING</code> The order is in the order book. Some trades may
	// have taken place but the order is not filled yet.<br>
	// <code>COMPLETE</code> The order is no longer in the order book. It has
	// been settled/filled or has been cancelled.
	Status *GetOrder2ResponseStatus `json:"status,omitempty"`

	// Direction to trigger the order
	StopDirection *GetOrder2ResponseStopDirection `json:"stop_direction,omitempty"`

	// Price to trigger the order
	StopPrice *string `json:"stop_price,omitempty"`

	// The Time in force option used when the LimitOrder was posted.
	//
	// Only returned on limit orders.<br>
	// <code>GTC</code> Good 'Til Cancelled. The order remains open until it is filled or cancelled by the user. (default)</br>
	// <code>IOC</code> Immediate Or Cancel. The part of the order that cannot be filled immediately will be cancelled. Cannot be post-only.</br>
	// <code>FOK</code> Fill Or Kill. If the order cannot be filled immediately and completely it will be cancelled before any trade. Cannot be post-only.
	TimeInForce *string `json:"time_in_force,omitempty"`

	// The order type
	Type *GetOrder2ResponseType `json:"type,omitempty"`
}

// The intention of the order, whether to buy or sell funds in the market.
//
// You can use this to determine the flow of funds in the order.
type GetOrder2ResponseSide string

// The current state of the order
//
// Status meaning:<br>
// <code>AWAITING</code> The order is awaiting to enter the order book.<br>
// <code>PENDING</code> The order is in the order book. Some trades may
// have taken place but the order is not filled yet.<br>
// <code>COMPLETE</code> The order is no longer in the order book. It has
// been settled/filled or has been cancelled.
type GetOrder2ResponseStatus string

// Direction to trigger the order
type GetOrder2ResponseStopDirection string

// The order type
type GetOrder2ResponseType string

// 1/orderbook
// 1/orderbook_top
type GetOrderBookResponse struct {
	// List of asks sorted from lowest to highest price
	Asks *[]OrderBookEntry `json:"asks,omitempty"`

	// List of bids sorted from highest to lowest price
	Bids *[]OrderBookEntry `json:"bids,omitempty"`

	// Unix timestamp in milliseconds
	Timestamp *int64 `json:"timestamp,omitempty"`
}

// GetOrderResponse response
type GetOrderResponse struct {
	// Amount of base filled, this value is always positive.
	Base *string `json:"base,omitempty"`

	// Time of order completion (Unix milliseconds)
	//
	// This value is set at the time of this order leaving the order book,
	// either immediately upon posting or later on due to a trade or cancellation.
	// Whilst the order is still pending/live it will be 0.
	CompletedTimestamp *string `json:"completed_timestamp,omitempty"`

	// Amount of counter filled, this value is always positive.
	Counter *string `json:"counter,omitempty"`

	// Time of order creation (Unix milliseconds)
	CreationTimestamp *string `json:"creation_timestamp,omitempty"`

	// Time of order expiration (Unix milliseconds)
	//
	// This value is set at the time of processing a request from you to cancel the order, otherwise it will be 0.
	ExpirationTimestamp *string `json:"expiration_timestamp,omitempty"`

	// Base amount of fees to be charged
	FeeBase *string `json:"fee_base,omitempty"`

	// Counter amount of fees to be charged
	FeeCounter *string `json:"fee_counter,omitempty"`

	// Limit price to transact
	LimitPrice *string `json:"limit_price,omitempty"`

	// Limit volume to transact
	LimitVolume *string `json:"limit_volume,omitempty"`
	OrderId     *string `json:"order_id,omitempty"`

	// Specifies the market.
	Pair *string `json:"pair,omitempty"`

	// <code>PENDING</code> The order has been placed. Some trades may have
	// taken place but the order is not filled yet.<br>
	// <code>COMPLETE</code> The order is no longer active. It has been settled
	// or has been cancelled.
	OrderState *GetOrderResponseState `json:"state,omitempty"`

	// The Time in force option used when the LimitOrder was posted.
	//
	// Only returned on limit orders.<br>
	// <code>GTC</code> Good 'Til Cancelled. The order remains open until it is filled or cancelled by the user. (default)</br>
	// <code>IOC</code> Immediate Or Cancel. The part of the order that cannot be filled immediately will be cancelled. Cannot be post-only.</br>
	// <code>FOK</code> Fill Or Kill. If the order cannot be filled immediately and completely it will be cancelled before any trade. Cannot be post-only.
	TimeInForce *string `json:"time_in_force,omitempty"`

	// <code>BUY</code> buy market order.<br>
	// <code>SELL</code> sell market order.<br>
	// <code>BID</code> bid (buy) limit order.<br>
	// <code>ASK</code> ask (sell) limit order.
	OrderType *GetOrderResponseType `json:"type,omitempty"`
}

// <code>PENDING</code> The order has been placed. Some trades may have
// taken place but the order is not filled yet.<br>
// <code>COMPLETE</code> The order is no longer active. It has been settled
// or has been cancelled.
type GetOrderResponseState string

// <code>BUY</code> buy market order.<br>
// <code>SELL</code> sell market order.<br>
// <code>BID</code> bid (buy) limit order.<br>
// <code>ASK</code> ask (sell) limit order.
type GetOrderResponseType string

// GetTickerResponse response for /api/ticker
type GetTickerResponse struct {
	// The lowest ask price
	Ask *string `json:"ask,omitempty"`

	// The highest bid price
	Bid *string `json:"bid,omitempty"`

	// Last trade price
	Last *string `json:"last_trade,omitempty"`
	Pair *string `json:"pair,omitempty"`

	// 24h rolling trade volume
	Rolling24HourVolume *string `json:"rolling_24_hour_volume,omitempty"`

	// Market current status
	//
	// <code>ACTIVE</code> when the market is trading normally
	//
	// <code>POSTONLY</code> when the market has been suspended and only post-only orders will be accepted
	//
	// <code>DISABLED</code> when the market is shutdown and no orders can be accepted
	Status *GetTickerResponseStatus `json:"status,omitempty"`

	// Unix timestamp in milliseconds of the tick
	Timestamp *string `json:"timestamp,omitempty"`
}

// Market current status
//
// <code>ACTIVE</code> when the market is trading normally
//
// <code>POSTONLY</code> when the market has been suspended and only post-only orders will be accepted
//
// <code>DISABLED</code> when the market is shutdown and no orders can be accepted
type GetTickerResponseStatus string

// GetWithdrawalResponse response
type GetWithdrawalResponse struct {
	// Amount to withdraw
	Amount *string `json:"amount,omitempty"`

	// Unix time the withdrawal was initiated, in milliseconds
	CreatedAt *string `json:"created_at,omitempty"`

	// Withdrawal currency.
	Currency *string `json:"currency,omitempty"`

	// External ID has the value that was passed in when the Withdrawal request was posted.
	ExternalID *string `json:"external_id,omitempty"`

	// Withdrawal fee
	Fee *string `json:"fee,omitempty"`
	ID  *string `json:"id,omitempty"`

	// Status
	Status *GetWithdrawalResponseStatus `json:"status,omitempty"`

	// Type distinguishes between different withdrawal methods where more than one is supported
	// for the given currency.
	Type *string `json:"type,omitempty"`
}

// Status
type GetWithdrawalResponseStatus string

// ListMovesResponse response
type ListMovesResponse struct {
	Moves *[]FundsMove `json:"moves,omitempty"`
}

// ListOrders2Response response for /api/2/listorders
type ListOrders2Response struct {
	Orders *[]OrderV2 `json:"orders,omitempty"`
}

// ListOrdersResponse response
type ListOrdersResponse struct {
	Orders *[]Order `json:"orders,omitempty"`
}

// ListTickersResponse response for /api/tickers
type ListTickersResponse struct {
	Tickers *[]Ticker `json:"tickers,omitempty"`
}

// ListTradesResponse response for /api/1/trades
type ListTradesResponse struct {
	Trades *[]PublicTrade `json:"trades,omitempty"`
}

// ListTransactionsResponse response
type ListTransactionsResponse struct {
	ID           *string        `json:"id,omitempty"`
	Transactions *[]Transaction `json:"transactions,omitempty"`
}

// ListTransfersResponse response for /api/1/transfers
type ListTransfersResponse struct {
	Transfers *[]Transfer `json:"transfers,omitempty"`
}

// ListUserTradesResponse response for /api/1/listtrades
type ListUserTradesResponse struct {
	Trades *[]TradeV2 `json:"trades,omitempty"`
}

// ListWithdrawalsResponse response
type ListWithdrawalsResponse struct {
	Withdrawals *[]Withdrawal `json:"withdrawals,omitempty"`
}

// MarketInfo current market information
type MarketInfo struct {
	// Base currency code
	BaseCcy *string `json:"base_currency,omitempty"`

	// Counter currency code
	CounterCcy *string `json:"counter_currency,omitempty"`

	// Fee decimal places
	FeeScale *int64 `json:"fee_scale,omitempty"`

	// Unique identifier for the market
	MarketID *string `json:"market_id,omitempty"`

	// Maximum order price
	MaxPrice *string `json:"max_price,omitempty"`

	// Maximum order volume
	MaxVolume *string `json:"max_volume,omitempty"`

	// Minimum order price
	MinPrice *string `json:"min_price,omitempty"`

	// Minimum order volume
	MinVolume *string `json:"min_volume,omitempty"`

	// Price decimal places
	PriceScale *int64 `json:"price_scale,omitempty"`

	// Current market trading status:<br>
	// <code>POST_ONLY</code> Trading is indefinitely suspended. This state is
	// commonly used when new markets are being launched to give traders enough
	// time to setup their orders before trading begins. When in this status,
	// orders can only be posted as post-only.<br>
	// <code>ACTIVE</code> Trading is fully enabled.<br>
	// <code>SUSPENDED</code> Trading has been temporarily suspended due to very
	// high volatility. When in this status, orders can only be posted as
	// post-only.<br>
	TradingStatus *MarketInfoTradingStatus `json:"trading_status,omitempty"`

	// Volume decimal places
	VolumeScale *int64 `json:"volume_scale,omitempty"`
}

// Current market trading status:<br>
// <code>POST_ONLY</code> Trading is indefinitely suspended. This state is
// commonly used when new markets are being launched to give traders enough
// time to setup their orders before trading begins. When in this status,
// orders can only be posted as post-only.<br>
// <code>ACTIVE</code> Trading is fully enabled.<br>
// <code>SUSPENDED</code> Trading has been temporarily suspended due to very
// high volatility. When in this status, orders can only be posted as
// post-only.<br>
type MarketInfoTradingStatus string

// MarketsInfoResponse response for /api/2/markets
type MarketsInfoResponse struct {
	Markets *[]MarketInfo `json:"markets,omitempty"`
}

// MoveResponse response
type MoveResponse struct {
	// Move unique identifier
	ID *string `json:"id,omitempty"`

	// The current state of the move.
	//
	// Status meaning:<br>
	// <code>CREATED</code> The move is awaiting execution.<br>
	// <code>MOVING</code> The funds have been reserved and the move is being executed.<br>
	// <code>SUCCESSFUL</code> The move has completed successfully and should be reflected in both accounts available
	// balance.<br>
	// <code>FAILED</code> The move has failed. There could be many reasons for this but the most likely is that the
	// debit account doesn't have enough available funds to move.<br>
	Status *MoveResponseStatus `json:"status,omitempty"`
}

// The current state of the move.
//
// Status meaning:<br>
// <code>CREATED</code> The move is awaiting execution.<br>
// <code>MOVING</code> The funds have been reserved and the move is being executed.<br>
// <code>SUCCESSFUL</code> The move has completed successfully and should be reflected in both accounts available
// balance.<br>
// <code>FAILED</code> The move has failed. There could be many reasons for this but the most likely is that the
// debit account doesn't have enough available funds to move.<br>
type MoveResponseStatus string

// The `base` and `counter` amounts are the principal
// amounts that were traded, ignoring fees. For example, if the order resulted
// in a single trade of 1 BTC for 1000 ZAR, then `base`=1 BTC and
// `counter`=1000 ZAR.
//
// The `fee_base` and `fee_counter` amounts are the fees
// debited after the trade principal amounts.
//
// For example, for a buy order, `base - base_fee` would be credited
// to the BTC account and `counter + counter_fee` would be debited
// from the ZAR account. Similarly, for a sell order, `counter -
// counter_fee` would be credited to the ZAR account and `base +
// base_fee` would be debited from the BTC account.
type Order struct {
	// Amount of base filled, this value is always positive.
	Base *string `json:"base,omitempty"`

	// Time of order completion (Unix milliseconds)
	//
	// This value is set at the time of this order leaving the order book,
	// either immediately upon posting or later on due to a trade or cancellation.
	// Whilst the order is still pending/live it will be 0.
	CompletedTimestamp *string `json:"completed_timestamp,omitempty"`

	// Amount of counter filled, this value is always positive.
	Counter *string `json:"counter,omitempty"`

	// Time of order creation (Unix milliseconds)
	CreationTimestamp *string `json:"creation_timestamp,omitempty"`

	// Time of order expiration (Unix milliseconds)
	//
	// This value is set at the time of processing a request from you to cancel the order, otherwise it will be 0.
	ExpirationTimestamp *string `json:"expiration_timestamp,omitempty"`

	// Base amount of fees to be charged
	FeeBase *string `json:"fee_base,omitempty"`

	// Counter amount of fees to be charged
	FeeCounter *string `json:"fee_counter,omitempty"`

	// Limit price to transact
	LimitPrice *string `json:"limit_price,omitempty"`

	// Limit volume to transact
	LimitVolume *string `json:"limit_volume,omitempty"`
	OrderId     *string `json:"order_id,omitempty"`

	// Specifies the market.
	Pair *string `json:"pair,omitempty"`

	// <code>PENDING</code> The order has been placed. Some trades may have
	// taken place but the order is not filled yet.<br>
	// <code>COMPLETE</code> The order is no longer active. It has been settled
	// or has been cancelled.
	OrderState *OrderState `json:"state,omitempty"`

	// The Time in force option used when the LimitOrder was posted.
	//
	// Only returned on limit orders.<br>
	// <code>GTC</code> Good 'Til Cancelled. The order remains open until it is filled or cancelled by the user. (default)</br>
	// <code>IOC</code> Immediate Or Cancel. The part of the order that cannot be filled immediately will be cancelled. Cannot be post-only.</br>
	// <code>FOK</code> Fill Or Kill. If the order cannot be filled immediately and completely it will be cancelled before any trade. Cannot be post-only.
	TimeInForce *string `json:"time_in_force,omitempty"`

	// <code>BUY</code> buy market order.<br>
	// <code>SELL</code> sell market order.<br>
	// <code>BID</code> bid (buy) limit order.<br>
	// <code>ASK</code> ask (sell) limit order.
	OrderType *OrderType `json:"type,omitempty"`
}

// <code>PENDING</code> The order has been placed. Some trades may have
// taken place but the order is not filled yet.<br>
// <code>COMPLETE</code> The order is no longer active. It has been settled
// or has been cancelled.
type OrderState string

// <code>BUY</code> buy market order.<br>
// <code>SELL</code> sell market order.<br>
// <code>BID</code> bid (buy) limit order.<br>
// <code>ASK</code> ask (sell) limit order.
type OrderType string

// OrderBookEntry is the representation of one or more order resting in the
// order book.
type OrderBookEntry struct {
	// Limit price at which orders are trading at
	Price *string `json:"price,omitempty"`

	// The volume available at the limit price
	Volume *string `json:"volume,omitempty"`
}

// OrderV2 defines model for OrderV2.
type OrderV2 struct {
	// Amount of base filled, this value is always positive.
	//
	// Use this field and `side` to determine credit or debit of funds.
	Base *string `json:"base,omitempty"`

	// Client Order ID has the value that was passed in when the Order was posted.
	ClientOrderID *string `json:"client_order_id,omitempty"`

	// Time of order completion (Unix milliseconds)
	//
	// This value is set at the time of this order leaving the order book,
	// either immediately upon posting or later on due to a trade or cancellation.
	// Whilst the order is still pending/live it will be 0.
	CompletedTimestamp *string `json:"completed_timestamp,omitempty"`

	// Amount of counter filled, this value is always positive.
	//
	// Use this field and `side` to determine credit or debit of funds.
	Counter *string `json:"counter,omitempty"`

	// Time of order creation (Unix milliseconds)
	CreationTimestamp *string `json:"creation_timestamp,omitempty"`

	// Time of order expiration (Unix milliseconds)
	//
	// This value is set at the time of processing a request from you to cancel the order, otherwise it will be 0.
	ExpirationTimestamp *string `json:"expiration_timestamp,omitempty"`

	// Base amount of fees to be charged
	FeeBase *string `json:"fee_base,omitempty"`

	// Counter amount of fees to be charged
	FeeCounter *string `json:"fee_counter,omitempty"`

	// Limit price to transact
	LimitPrice *string `json:"limit_price,omitempty"`

	// Limit volume to transact
	LimitVolume *string `json:"limit_volume,omitempty"`

	// The order reference
	Ref *string `json:"order_id,omitempty"`

	// Specifies the market
	Pair *string `json:"pair,omitempty"`

	// The intention of the order, whether to buy or sell funds in the market.
	//
	// You can use this to determine the flow of funds in the order.
	Side *OrderV2Side `json:"side,omitempty"`

	// The current state of the order
	//
	// Status meaning:<br>
	// <code>AWAITING</code> The order is awaiting to enter the order book.<br>
	// <code>PENDING</code> The order is in the order book. Some trades may
	// have taken place but the order is not filled yet.<br>
	// <code>COMPLETE</code> The order is no longer in the order book. It has
	// been settled/filled or has been cancelled.
	Status *OrderV2Status `json:"status,omitempty"`

	// Direction to trigger the order
	StopDirection *OrderV2StopDirection `json:"stop_direction,omitempty"`

	// Price to trigger the order
	StopPrice *string `json:"stop_price,omitempty"`

	// The Time in force option used when the LimitOrder was posted.
	//
	// Only returned on limit orders.<br>
	// <code>GTC</code> Good 'Til Cancelled. The order remains open until it is filled or cancelled by the user. (default)</br>
	// <code>IOC</code> Immediate Or Cancel. The part of the order that cannot be filled immediately will be cancelled. Cannot be post-only.</br>
	// <code>FOK</code> Fill Or Kill. If the order cannot be filled immediately and completely it will be cancelled before any trade. Cannot be post-only.
	TimeInForce *string `json:"time_in_force,omitempty"`

	// The order type
	Type *OrderV2Type `json:"type,omitempty"`
}

// The intention of the order, whether to buy or sell funds in the market.
//
// You can use this to determine the flow of funds in the order.
type OrderV2Side string

// The current state of the order
//
// Status meaning:<br>
// <code>AWAITING</code> The order is awaiting to enter the order book.<br>
// <code>PENDING</code> The order is in the order book. Some trades may
// have taken place but the order is not filled yet.<br>
// <code>COMPLETE</code> The order is no longer in the order book. It has
// been settled/filled or has been cancelled.
type OrderV2Status string

// Direction to trigger the order
type OrderV2StopDirection string

// The order type
type OrderV2Type string

// PostLimitOrderResponse defines model for PostLimitOrderResponse.
type PostLimitOrderResponse struct {
	// Unique order identifier
	OrderID *string `json:"order_id,omitempty"`
}

// PostMarketOrderResponse defines model for PostMarketOrderResponse.
type PostMarketOrderResponse struct {
	// Unique order identifier
	OrderID *string `json:"order_id,omitempty"`
}

// PublicTrade defines model for PublicTrade.
type PublicTrade struct {
	// Whether the taker was buying or not.
	IsBuy *bool `json:"is_buy,omitempty"`

	// Price at which the asset traded at
	Price *string `json:"price,omitempty"`

	// The ever incrementing trade identifier within a market
	Sequence *int64 `json:"sequence,omitempty"`

	// Unix timestamp in milliseconds
	Timestamp *string `json:"timestamp,omitempty"`

	// Amount of assets traded
	Volume *string `json:"volume,omitempty"`
}

// SendFeeResponse response object for send fee call
type SendFeeResponse struct {
	Currency *string `json:"currency,omitempty"`
	Fee      *string `json:"fee,omitempty"`
}

// StopOrderResponse defines model for StopOrderResponse.
type StopOrderResponse struct {
	Success *bool `json:"success,omitempty"`
}

// Ticker summarised instant market data
type Ticker struct {
	// The lowest ask price
	Ask *string `json:"ask,omitempty"`

	// The highest bid price
	Bid *string `json:"bid,omitempty"`

	// Last trade price
	Last *string `json:"last_trade,omitempty"`
	Pair *string `json:"pair,omitempty"`

	// 24h rolling trade volume
	Rolling24HourVolume *string `json:"rolling_24_hour_volume,omitempty"`

	// Market current status
	//
	// <code>ACTIVE</code> when the market is trading normally
	//
	// <code>POSTONLY</code> when the market has been suspended and only post-only orders will be accepted
	//
	// <code>DISABLED</code> when the market is shutdown and no orders can be accepted
	Status *TickerStatus `json:"status,omitempty"`

	// Unix timestamp in milliseconds of the tick
	Timestamp *string `json:"timestamp,omitempty"`
}

// Market current status
//
// <code>ACTIVE</code> when the market is trading normally
//
// <code>POSTONLY</code> when the market has been suspended and only post-only orders will be accepted
//
// <code>DISABLED</code> when the market is shutdown and no orders can be accepted
type TickerStatus string

// TradeDetails contains a transaction volume, price and pair
type TradeDetails struct {
	// Pair of the market
	Pair *string `json:"pair,omitempty"`

	// Price at which the volume traded for
	Price *string `json:"price,omitempty"`

	// Sequence identifies the trade within a market
	Sequence *int64 `json:"sequence,omitempty"`

	// Volume is the amount of base traded
	Volume *string `json:"volume,omitempty"`
}

// TradeV2 defines model for TradeV2.
type TradeV2 struct {
	// Amount of base filled
	Base *string `json:"base,omitempty"`

	// Client Order ID has the value that was passed in when the Order was posted.
	ClientOrderID *string `json:"client_order_id,omitempty"`

	// Amount of counter filled
	Counter *string `json:"counter,omitempty"`

	// Base amount of fees charged
	FeeBase *string `json:"fee_base,omitempty"`

	// Counter amount of fees charged
	FeeCounter *string `json:"fee_counter,omitempty"`
	IsBuy      *bool   `json:"is_buy,omitempty"`

	// Unique order identifier
	OrderID *string `json:"order_id,omitempty"`

	// Currency pair
	Pair *string `json:"pair,omitempty"`

	// Order price
	Price    *string `json:"price,omitempty"`
	Sequence *int64  `json:"sequence,omitempty"`

	// Unix timestamp in milliseconds
	Timestamp *string `json:"timestamp,omitempty"`

	// Order type
	OrderType *TradeV2Type `json:"type,omitempty"`

	// Order volume
	Volume *string `json:"volume,omitempty"`
}

// Order type
type TradeV2Type string

// Transaction defines model for Transaction.
type Transaction struct {
	AccountID *string `json:"account_id,omitempty"`

	// Amount available
	Available *string `json:"available,omitempty"`

	// Change in amount available
	AvailableDelta *string `json:"available_delta,omitempty"`

	// Account balance
	Balance *string `json:"balance,omitempty"`

	// Change in balance
	BalanceDelta *string `json:"balance_delta,omitempty"`
	Currency     *string `json:"currency,omitempty"`

	// Human-readable description of the transaction.
	Description  *string       `json:"description,omitempty"`
	DetailFields *DetailFields `json:"detail_fields,omitempty"`

	// Human-readable label-value attributes.
	Details *Transaction_Details `json:"details,omitempty"`

	// The kind of the transaction indicates the transaction flow
	//
	// Kinds explained:<br>
	// <code>FEE</code> when transaction is towards Luno fees<br>
	// <code>TRANSFER</code> when the transaction is a one way flow of funds, e.g. a deposit or crypto send<br>
	// <code>EXCHANGE</code> when the transaction is part of a two way exchange, e.g. a trade or instant buy
	Kind     *TransactionKind `json:"kind,omitempty"`
	RowIndex *int64           `json:"row_index,omitempty"`

	// Unix timestamp, in milliseconds
	Timestamp *string `json:"timestamp,omitempty"`
}

// Human-readable label-value attributes.
type Transaction_Details struct {
	AdditionalProperties map[string]string `json:"-"`
}

// The kind of the transaction indicates the transaction flow
//
// Kinds explained:<br>
// <code>FEE</code> when transaction is towards Luno fees<br>
// <code>TRANSFER</code> when the transaction is a one way flow of funds, e.g. a deposit or crypto send<br>
// <code>EXCHANGE</code> when the transaction is part of a two way exchange, e.g. a trade or instant buy
type TransactionKind string

// Transfer defines model for Transfer.
type Transfer struct {
	// Amount that has been credited or debited on the account. This is always a
	// positive value regardless of the transfer direction.
	Amount *string `json:"amount,omitempty"`

	// Unix timestamp the transfer was initiated, in milliseconds
	CreatedAt *string `json:"created_at,omitempty"`

	// Fee that has been charged by Luno with regards to this transfer.
	// This is not included in the `amount`.
	// For example, if you receive a transaction with the raw amount of 1 BTC
	// and we charge a `fee` of 0.003 BTC on this transaction you will be
	// credited the `amount` of 0.997 BTC.
	Fee *string `json:"fee,omitempty"`

	// Transfer unique identifier
	ID *string `json:"id,omitempty"`

	// True for credit transfers, false for debits.
	Inbound *bool `json:"inbound,omitempty"`

	// When the transfer reflects an on-chain transaction this field will have
	// the transaction ID.
	TransactionID *string `json:"transaction_id,omitempty"`
}

// Withdrawal struct
type Withdrawal struct {
	// Amount to withdraw
	Amount *string `json:"amount,omitempty"`

	// Unix time the withdrawal was initiated, in milliseconds
	CreatedAt *string `json:"created_at,omitempty"`

	// Withdrawal currency.
	Currency *string `json:"currency,omitempty"`

	// External ID has the value that was passed in when the Withdrawal request was posted.
	ExternalID *string `json:"external_id,omitempty"`

	// Withdrawal fee
	Fee *string `json:"fee,omitempty"`
	ID  *string `json:"id,omitempty"`

	// Status
	Status *WithdrawalStatus `json:"status,omitempty"`

	// Type distinguishes between different withdrawal methods where more than one is supported
	// for the given currency.
	Type *string `json:"type,omitempty"`
}

// Status
type WithdrawalStatus string

// Beneficiary defines model for beneficiary.
type Beneficiary struct {
	BankAccountBranch       *string `json:"bank_account_branch,omitempty"`
	BankAccountNumber       *string `json:"bank_account_number,omitempty"`
	BankAccountType         *string `json:"bank_account_type,omitempty"`
	BankCountry             *string `json:"bank_country,omitempty"`
	BankName                *string `json:"bank_name,omitempty"`
	BankRecipient           *string `json:"bank_recipient,omitempty"`
	CreatedAt               *int64  `json:"created_at,omitempty"`
	Id                      *string `json:"id,omitempty"`
	SupportsFastWithdrawals *bool   `json:"supports_fast_withdrawals,omitempty"`
}

// CreateAccountResponse defines model for createAccountResponse.
type CreateAccountResponse struct {
	Currency *string `json:"currency,omitempty"`
	ID       *string `json:"id,omitempty"`
	Name     *string `json:"name,omitempty"`
}

// CreateFundingAddressResponse create wallet response body
type CreateFundingAddressResponse struct {
	AccountId        *string        `json:"account_id,omitempty"`
	Address          *string        `json:"address,omitempty"`
	AddressMeta      *[]AddressMeta `json:"address_meta,omitempty"`
	Asset            *string        `json:"asset,omitempty"`
	AssignedAt       *string        `json:"assigned_at,omitempty"`
	Name             *string        `json:"name,omitempty"`
	QrCodeUri        *string        `json:"qr_code_uri,omitempty"`
	ReceiveFee       *string        `json:"receive_fee,omitempty"`
	TotalReceived    *string        `json:"total_received,omitempty"`
	TotalUnconfirmed *string        `json:"total_unconfirmed,omitempty"`
}

// GetBalancesResponse balance lookup response
type GetBalancesResponse struct {
	Balance *[]AccountBalance `json:"balance,omitempty"`
}

// GetFeeInfoResponse response object for get fee info calls
type GetFeeInfoResponse struct {
	MakerFee        *string `json:"maker_fee,omitempty"`
	TakerFee        *string `json:"taker_fee,omitempty"`
	ThirtyDayVolume *string `json:"thirty_day_volume,omitempty"`
}

// GetFundingAddressResponse get funding address response body
type GetFundingAddressResponse struct {
	AccountId        *string        `json:"account_id,omitempty"`
	Address          *string        `json:"address,omitempty"`
	AddressMeta      *[]AddressMeta `json:"address_meta,omitempty"`
	Asset            *string        `json:"asset,omitempty"`
	AssignedAt       *string        `json:"assigned_at,omitempty"`
	Name             *string        `json:"name,omitempty"`
	QrCodeUri        *string        `json:"qr_code_uri,omitempty"`
	ReceiveFee       *string        `json:"receive_fee,omitempty"`
	TotalReceived    *string        `json:"total_received,omitempty"`
	TotalUnconfirmed *string        `json:"total_unconfirmed,omitempty"`
}

// ListBeneficiariesResponse response object for list beneficiaries
type ListBeneficiariesResponse struct {
	Beneficiaries *[]Beneficiary `json:"beneficiaries,omitempty"`
}

// ListPendingTransactionsResponse
type ListPendingTransactionsResponse struct {
	Currency     *string        `json:"currency,omitempty"`
	Id           *string        `json:"id,omitempty"`
	Name         *string        `json:"name,omitempty"`
	Pending      *[]Transaction `json:"pending,omitempty"`
	Transactions *[]Transaction `json:"transactions,omitempty"`
}

// SendResponse defines model for sendResponse.
type SendResponse struct {
	Success      *bool   `json:"success,omitempty"`
	WithdrawalID *string `json:"withdrawal_id,omitempty"`
}

// UpdateAccountNameResponse defines model for updateAccountNameResponse.
type UpdateAccountNameResponse struct {
	Success *bool `json:"success,omitempty"`
}

// ApiError defines model for apiError.
type ApiError struct {
	// Unique error reference
	Code *string `json:"code,omitempty"`

	// Verbose error message
	Message *string `json:"message,omitempty"`
}

// CreateAccountParams defines parameters for CreateAccount.
type CreateAccountParams struct {
	// The currency code for the Account you want to create.  Please see the Currency section for a detailed list of currencies supported by the Luno platform.
	//
	// Users must be verified to trade currency in order to be able to create an Account.  For more information on the verification process, please see <a href="/help/en/articles/1000168396">How do I verify my identity?</a>.
	//
	// Users have a limit of 4 accounts per currency.
	Currency string `form:"currency" json:"currency"`

	// The label to use for this account
	Name string `form:"name" json:"name"`
}

// UpdateAccountNameParams defines parameters for UpdateAccountName.
type UpdateAccountNameParams struct {
	// The label to use for this account
	Name string `form:"name" json:"name"`
}

// ListTransactionsParams defines parameters for ListTransactions.
type ListTransactionsParams struct {
	// Minimum of the row range to return (inclusive)
	MinRow int64 `form:"min_row" json:"min_row"`

	// Maximum of the row range to return (exclusive)
	MaxRow int64 `form:"max_row" json:"max_row"`
}

// GetBalancesParams defines parameters for GetBalances.
type GetBalancesParams struct {
	// Only return balances for wallets with these currencies (if not provided,
	// all balances will be returned). To request balances for multiple currencies,
	// pass the parameter multiple times,
	// e.g. `assets=XBT&assets=ETH`.
	Assets *[]string `form:"assets,omitempty" json:"assets,omitempty"`
}

// GetFeeInfoParams defines parameters for GetFeeInfo.
type GetFeeInfoParams struct {
	// Get fee information about this pair.
	Pair string `form:"pair" json:"pair"`
}

// GetFundingAddressParams defines parameters for GetFundingAddress.
type GetFundingAddressParams struct {
	// Currency code of the asset.
	Asset string `form:"asset" json:"asset"`

	// Specific cryptocurrency address to retrieve. If not provided, the
	// default address will be used.
	Address *string `form:"address,omitempty" json:"address,omitempty"`
}

// CreateFundingAddressParams defines parameters for CreateFundingAddress.
type CreateFundingAddressParams struct {
	// Currency code of the asset.
	Asset string `form:"asset" json:"asset"`

	// An optional name for the new Receive Address
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// ListOrdersParams defines parameters for ListOrders.
type ListOrdersParams struct {
	// Filter to only orders of this state
	OrderState *ListOrdersParamsState `form:"state,omitempty" json:"state,omitempty"`

	// Filter to only orders of this currency pair
	Pair *string `form:"pair,omitempty" json:"pair,omitempty"`

	// Filter to orders created before this timestamp (Unix milliseconds)
	CreatedBefore *int64 `form:"created_before,omitempty" json:"created_before,omitempty"`

	// Limit to this many orders
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListOrdersParamsState defines parameters for ListOrders.
type ListOrdersParamsState string

// ListUserTradesParams defines parameters for ListUserTrades.
type ListUserTradesParams struct {
	// Filter to trades of this currency pair.
	Pair string `form:"pair" json:"pair"`

	// Filter to trades on or after this timestamp (Unix milliseconds).
	Since *string `form:"since,omitempty" json:"since,omitempty"`

	// Filter to trades before this timestamp (Unix milliseconds).
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// Filter to trades from (including) this sequence number.
	// Default behaviour is not to include this filter.
	AfterSeq *int64 `form:"after_seq,omitempty" json:"after_seq,omitempty"`

	// Filter to trades before (excluding) this sequence number.
	// Default behaviour is not to include this filter.
	BeforeSeq *int64 `form:"before_seq,omitempty" json:"before_seq,omitempty"`

	// If set to true, sorts trades in descending order, otherwise ascending
	// order will be assumed.
	SortDesc *bool `form:"sort_desc,omitempty" json:"sort_desc,omitempty"`

	// Limit to this number of trades (default 100).
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostMarketOrderParams defines parameters for PostMarketOrder.
type PostMarketOrderParams struct {
	// The currency pair to trade.
	Pair string `form:"pair" json:"pair"`

	// <code>BUY</code> to buy an asset<br>
	// <code>SELL</code> to sell an asset
	OrderType PostMarketOrderParamsType `form:"type" json:"type"`

	// For a <code>BUY</code> order: amount of the counter currency to use (e.g. how much EUR to use to buy BTC in the BTC/EUR market)
	CounterVolume *string `form:"counter_volume,omitempty" json:"counter_volume,omitempty"`

	// For a <code>SELL</code> order: amount of the base currency to use (e.g. how much BTC to sell for EUR in the BTC/EUR market)
	BaseVolume *string `form:"base_volume,omitempty" json:"base_volume,omitempty"`

	// The base currency account to use in the trade.
	BaseAccountID *int64 `form:"base_account_id,omitempty" json:"base_account_id,omitempty"`

	// The counter currency account to use in the trade.
	CounterAccountID *int64 `form:"counter_account_id,omitempty" json:"counter_account_id,omitempty"`

	// Unix timestamp in milliseconds of when the request was created and sent.
	Timestamp *int64 `form:"timestamp,omitempty" json:"timestamp,omitempty"`

	// Specifies the number of milliseconds after timestamp the request is valid for.
	// If `timestamp` is not specified, `ttl` will not be used.
	TTL *int64 `form:"ttl,omitempty" json:"ttl,omitempty"`

	// Client order ID.
	// May only contain alphanumeric (0-9, a-z, or A-Z) and special characters (_ ; , . -). Maximum length: 255.
	// It will be available in read endpoints, so you can use it to reconcile Luno with your internal system.
	// Values must be unique across all your successful order creation endpoint calls; trying to create an order
	// with the same `client_order_id` as one of your past orders will result in a HTTP 409 Conflict response.
	ClientOrderID *string `form:"client_order_id,omitempty" json:"client_order_id,omitempty"`
}

// PostMarketOrderParamsType defines parameters for PostMarketOrder.
type PostMarketOrderParamsType string

// GetOrderBookFullParams defines parameters for GetOrderBookFull.
type GetOrderBookFullParams struct {
	// Currency pair of the Orders to retrieve
	Pair string `form:"pair" json:"pair"`
}

// GetOrderBookParams defines parameters for GetOrderBook.
type GetOrderBookParams struct {
	// Currency pair of the Orders to retrieve
	Pair string `form:"pair" json:"pair"`
}

// PostLimitOrderParams defines parameters for PostLimitOrder.
type PostLimitOrderParams struct {
	// The currency pair to trade.
	Pair string `form:"pair" json:"pair"`

	// <code>BID</code> for a bid (buy) limit order<br>
	// <code>ASK</code> for an ask (sell) limit order
	OrderType PostLimitOrderParamsType `form:"type" json:"type"`

	// <code>GTC</code> Good 'Til Cancelled. The order remains open until it is filled or cancelled by the user.</br>
	// <code>IOC</code> Immediate Or Cancel. The part of the order that cannot be filled immediately will be cancelled. Cannot be post-only.</br>
	// <code>FOK</code> Fill Or Kill. If the order cannot be filled immediately and completely it will be cancelled before any trade. Cannot be post-only.
	TimeInForce *PostLimitOrderParamsTimeInForce `form:"time_in_force,omitempty" json:"time_in_force,omitempty"`

	// Post-only Orders will be cancelled if they would otherwise have traded
	// immediately.
	// For example, if there's a bid at ZAR 100,000 and you place a post-only ask at ZAR 100,000,
	// your order will be cancelled instead of trading.
	// If the best bid is ZAR 100,000 and you place a post-only ask at ZAR 101,000,
	// your order won't trade but will go into the order book.
	PostOnly *bool `form:"post_only,omitempty" json:"post_only,omitempty"`

	// Amount of cryptocurrency to buy or sell as a decimal string in units of the currency.
	Volume string `form:"volume" json:"volume"`

	// Limit price as a decimal string in units of ZAR/BTC.
	Price string `form:"price" json:"price"`

	// Trigger trade price to activate this order as a decimal string. If this
	// is set then this is treated as a Stop Limit Order and `stop_direction`
	// is expected to be set too.
	StopPrice *string `form:"stop_price,omitempty" json:"stop_price,omitempty"`

	// Side of the trigger price to activate the order. This should be set if `stop_price` is also
	// set.
	//
	// `RELATIVE_LAST_TRADE` will automatically infer the direction based on the last
	// trade price and the stop price. If last trade price is less than stop price then stop
	// direction is ABOVE otherwise is BELOW.
	StopDirection *PostLimitOrderParamsStopDirection `form:"stop_direction,omitempty" json:"stop_direction,omitempty"`

	// The base currency Account to use in the trade.
	BaseAccountID *int64 `form:"base_account_id,omitempty" json:"base_account_id,omitempty"`

	// The counter currency Account to use in the trade.
	CounterAccountID *int64 `form:"counter_account_id,omitempty" json:"counter_account_id,omitempty"`

	// Unix timestamp in milliseconds of when the request was created and sent.
	Timestamp *int64 `form:"timestamp,omitempty" json:"timestamp,omitempty"`

	// Specifies the number of milliseconds after timestamp the request is valid for.
	// If `timestamp` is not specified, `ttl` will not be used.
	TTL *int64 `form:"ttl,omitempty" json:"ttl,omitempty"`

	// Client order ID.
	// May only contain alphanumeric (0-9, a-z, or A-Z) and special characters (_ ; , . -). Maximum length: 255.
	// It will be available in read endpoints, so you can use it to reconcile Luno with your internal system.
	// Values must be unique across all your successful order creation endpoint calls; trying to create an order
	// with the same `client_order_id` as one of your past orders will result in a HTTP 409 Conflict response.
	ClientOrderID *string `form:"client_order_id,omitempty" json:"client_order_id,omitempty"`
}

// PostLimitOrderParamsType defines parameters for PostLimitOrder.
type PostLimitOrderParamsType string

// PostLimitOrderParamsTimeInForce defines parameters for PostLimitOrder.
type PostLimitOrderParamsTimeInForce string

// PostLimitOrderParamsStopDirection defines parameters for PostLimitOrder.
type PostLimitOrderParamsStopDirection string

// SendParams defines parameters for Send.
type SendParams struct {
	// Amount to send as a decimal string.
	Amount string `form:"amount" json:"amount"`

	// Currency to send.
	Currency string `form:"currency" json:"currency"`

	// Destination address or email address.
	//
	// <b>Note</b>:
	// <ul>
	// <li>Ethereum addresses must be
	// <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md" target="_blank" rel="nofollow">checksummed</a>.</li>
	// <li>Ethereum sends to email addresses are not supported.</li>
	// </ul>
	Address string `form:"address" json:"address"`

	// User description for the transaction to record on the account statement.
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// Message to send to the recipient.
	// This is only relevant when sending to an email address.
	Message *string `form:"message,omitempty" json:"message,omitempty"`

	// Optional unique ID to associate with this withdrawal.
	// Useful to prevent duplicate sends in case of failure.
	// This supports all alphanumeric characters, as well as "-" and "_".
	ExternalID *string `form:"external_id,omitempty" json:"external_id,omitempty"`

	// Optional boolean flag indicating that a XRP destination tag is provided (even if zero).
	HasDestinationTag *bool `form:"has_destination_tag,omitempty" json:"has_destination_tag,omitempty"`

	// Optional XRP destination tag. Note that HasDestinationTag must be true if this value is provided.
	DestinationTag *int64 `form:"destination_tag,omitempty" json:"destination_tag,omitempty"`
}

// SendFeeParams defines parameters for SendFee.
type SendFeeParams struct {
	// Amount to send as a decimal string.
	Amount string `form:"amount" json:"amount"`

	// Currency to send.
	Currency string `form:"currency" json:"currency"`

	// Destination address or email address.
	//
	// <b>Note</b>:
	// <ul>
	// <li>Ethereum addresses must be
	// <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md" target="_blank" rel="nofollow">checksummed</a>.</li>
	// <li>Ethereum sends to email addresses are not supported.</li>
	// </ul>
	Address string `form:"address" json:"address"`
}

// StopOrderParams defines parameters for StopOrder.
type StopOrderParams struct {
	// The Order identifier as a string.
	OrderID string `form:"order_id" json:"order_id"`
}

// GetTickerParams defines parameters for GetTicker.
type GetTickerParams struct {
	// Currency pair
	Pair string `form:"pair" json:"pair"`
}

// GetTickersParams defines parameters for GetTickers.
type GetTickersParams struct {
	// Return tickers for multiple markets (if not provided, all tickers will be returned).
	// To request tickers for multiple markets, pass the parameter multiple times,
	// e.g. `pair=XBTZAR&pair=ETHZAR`.
	Pair *[]string `form:"pair,omitempty" json:"pair,omitempty"`
}

// ListTradesParams defines parameters for ListTrades.
type ListTradesParams struct {
	// Currency pair of the market to list the trades from
	Pair string `form:"pair" json:"pair"`

	// Fetch trades executed after this time, specified as a Unix timestamp in
	// milliseconds. An error will be returned if this is before 24h ago. Use
	// this parameter to either restrict to a shorter window or to iterate over
	// the trades in case you need more than the 100 most recent trades.
	Since *string `form:"since,omitempty" json:"since,omitempty"`
}

// ListWithdrawalsParams defines parameters for ListWithdrawals.
type ListWithdrawalsParams struct {
	// Filter to withdrawals requested on or before the withdrawal with this ID.
	// Can be used for pagination.
	BeforeID *int64 `form:"before_id,omitempty" json:"before_id,omitempty"`

	// Limit to this many withdrawals
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateWithdrawalParams defines parameters for CreateWithdrawal.
type CreateWithdrawalParams struct {
	// Withdrawal method.
	Type string `form:"type" json:"type"`

	// Amount to withdraw. The currency withdrawn depends on the type setting.
	Amount string `form:"amount" json:"amount"`

	// The beneficiary ID of the bank account the withdrawal will be paid out to.
	// This parameter is required if the user has set up multiple beneficiaries.
	// The beneficiary ID can be found by selecting on the beneficiary name on the user’s <a href="/wallet/beneficiaries">Beneficiaries</a> page.
	BeneficiaryID *int64 `form:"beneficiary_id,omitempty" json:"beneficiary_id,omitempty"`

	// If true, it will be a fast withdrawal if possible. Fast withdrawals come with a fee.
	// Currently fast withdrawals are only available for `type=ZAR_EFT`; for other types, an error is returned.
	// Fast withdrawals are not possible for Bank of Baroda, Deutsche Bank, Merrill Lynch South Africa, UBS, Postbank and Tyme Bank.
	// The fee to be charged is the same as when withdrawing from the UI.
	Fast *bool `form:"fast,omitempty" json:"fast,omitempty"`

	// For internal use.
	Reference *string `form:"reference,omitempty" json:"reference,omitempty"`

	// Optional unique ID to associate with this withdrawal.
	// Useful to prevent duplicate sends.
	// This field supports all alphanumeric characters including "-" and "_".
	ExternalID *string `form:"external_id,omitempty" json:"external_id,omitempty"`
}

// GetCandlesParams defines parameters for GetCandles.
type GetCandlesParams struct {
	// Currency pair
	Pair string `form:"pair" json:"pair"`

	// Filter to candles starting on or after this timestamp (Unix milliseconds).
	// Only up to 1000 of the earliest candles are returned.
	Since string `form:"since" json:"since"`

	// Candle duration in seconds.
	// For example, 300 corresponds to 5m candles. Currently supported
	// durations are: 60 (1m), 300 (5m), 900 (15m), 1800 (30m), 3600 (1h),
	// 10800 (3h), 14400 (4h), 28800 (8h), 86400 (24h), 259200 (3d), 604800
	// (7d).
	Duration int64 `form:"duration" json:"duration"`
}

// GetMoveParams defines parameters for GetMove.
type GetMoveParams struct {
	// Get by the system ID. This is mutually exclusive with <code>client_move_id</code> and is required if
	// <code>client_move_id</code> is not provided.
	ID *string `form:"id,omitempty" json:"id,omitempty"`

	// Get by the user defined ID. This is mutually exclusive with <code>id</code> and is required if <code>id</code> is
	// not provided.
	ClientMoveID *string `form:"client_move_id,omitempty" json:"client_move_id,omitempty"`
}

// MoveParams defines parameters for Move.
type MoveParams struct {
	// Amount to transfer. Must be positive.
	Amount string `form:"amount" json:"amount"`

	// The account to debit the funds from.
	DebitAccountID int64 `form:"debit_account_id" json:"debit_account_id"`

	// The account to credit the funds to.
	CreditAccountID int64 `form:"credit_account_id" json:"credit_account_id"`

	// Client move ID.
	// May only contain alphanumeric (0-9, a-z, or A-Z) and special characters (_ ; , . -). Maximum length: 255.
	// It will be available in read endpoints, so you can use it to avoid duplicate moves between the same accounts.
	// Values must be unique across all your successful calls of this endpoint; trying to create a move request
	// with the same `client_move_id` as one of your past move requests will result in a HTTP 409 Conflict response.
	ClientMoveID *string `form:"client_move_id,omitempty" json:"client_move_id,omitempty"`
}

// ListMovesParams defines parameters for ListMoves.
type ListMovesParams struct {
	// Filter to moves requested before this timestamp (Unix milliseconds)
	Before *int64 `form:"before,omitempty" json:"before,omitempty"`

	// Limit to this many moves
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListTransfersParams defines parameters for ListTransfers.
type ListTransfersParams struct {
	// Unique identifier of the account to list the transfers from.
	AccountID int64 `form:"account_id" json:"account_id"`

	// Limit to this many transfers.
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// Filter to transfers created before this timestamp (Unix milliseconds).
	// The default value (0) will return the latest transfers on the account.
	Before *int64 `form:"before,omitempty" json:"before,omitempty"`
}

// ListOrdersV2Params defines parameters for ListOrdersV2.
type ListOrdersV2Params struct {
	// Filter to only orders of this currency pair.
	Pair *string `form:"pair,omitempty" json:"pair,omitempty"`

	// If true, will return closed orders instead of open orders.
	Closed *bool `form:"closed,omitempty" json:"closed,omitempty"`

	// Filter to orders created before this timestamp (Unix milliseconds)
	CreatedBefore *int64 `form:"created_before,omitempty" json:"created_before,omitempty"`

	// Limit to this many orders
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetOrderV3Params defines parameters for GetOrderV3.
type GetOrderV3Params struct {
	// Order reference
	Ref *string `form:"id,omitempty" json:"id,omitempty"`

	// Client Order ID has the value that was passed in when the Order was posted.
	ClientOrderID *string `form:"client_order_id,omitempty" json:"client_order_id,omitempty"`
}

// Getter for additional properties for Transaction_Details. Returns the specified
// element and whether it was found
func (a Transaction_Details) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Transaction_Details
func (a *Transaction_Details) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Transaction_Details to handle AdditionalProperties
func (a *Transaction_Details) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Transaction_Details to handle AdditionalProperties
func (a Transaction_Details) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
