// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package client

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/bhbosman/goTrader/internal/lunoApi/components"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateAccount request
	CreateAccount(ctx context.Context, params *components.CreateAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAccountName request
	UpdateAccountName(ctx context.Context, iD int64, params *components.UpdateAccountNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPendingTransactions request
	ListPendingTransactions(ctx context.Context, iD int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTransactions request
	ListTransactions(ctx context.Context, iD int64, params *components.ListTransactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBalances request
	GetBalances(ctx context.Context, params *components.GetBalancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBeneficiariesResponse request
	ListBeneficiariesResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeeInfo request
	GetFeeInfo(ctx context.Context, params *components.GetFeeInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFundingAddress request
	GetFundingAddress(ctx context.Context, params *components.GetFundingAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFundingAddress request
	CreateFundingAddress(ctx context.Context, params *components.CreateFundingAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrders request
	ListOrders(ctx context.Context, params *components.ListOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUserTrades request
	ListUserTrades(ctx context.Context, params *components.ListUserTradesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMarketOrder request
	PostMarketOrder(ctx context.Context, params *components.PostMarketOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrderBookFull request
	GetOrderBookFull(ctx context.Context, params *components.GetOrderBookFullParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrderBook request
	GetOrderBook(ctx context.Context, params *components.GetOrderBookParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrder request
	GetOrder(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLimitOrder request
	PostLimitOrder(ctx context.Context, params *components.PostLimitOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Send request
	Send(ctx context.Context, params *components.SendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendFee request
	SendFee(ctx context.Context, params *components.SendFeeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopOrder request
	StopOrder(ctx context.Context, params *components.StopOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTicker request
	GetTicker(ctx context.Context, params *components.GetTickerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTickers request
	GetTickers(ctx context.Context, params *components.GetTickersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTrades request
	ListTrades(ctx context.Context, params *components.ListTradesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWithdrawals request
	ListWithdrawals(ctx context.Context, params *components.ListWithdrawalsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWithdrawal request
	CreateWithdrawal(ctx context.Context, params *components.CreateWithdrawalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelWithdrawal request
	CancelWithdrawal(ctx context.Context, iD int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWithdrawal request
	GetWithdrawal(ctx context.Context, iD int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCandles request
	GetCandles(ctx context.Context, params *components.GetCandlesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Markets request
	Markets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMove request
	GetMove(ctx context.Context, params *components.GetMoveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Move request
	Move(ctx context.Context, params *components.MoveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMoves request
	ListMoves(ctx context.Context, params *components.ListMovesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTransfers request
	ListTransfers(ctx context.Context, params *components.ListTransfersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrdersV2 request
	ListOrdersV2(ctx context.Context, params *components.ListOrdersV2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrderV2 request
	GetOrderV2(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrderV3 request
	GetOrderV3(ctx context.Context, params *components.GetOrderV3Params, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateAccount(ctx context.Context, params *components.CreateAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccountName(ctx context.Context, iD int64, params *components.UpdateAccountNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountNameRequest(c.Server, iD, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPendingTransactions(ctx context.Context, iD int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPendingTransactionsRequest(c.Server, iD)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTransactions(ctx context.Context, iD int64, params *components.ListTransactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTransactionsRequest(c.Server, iD, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBalances(ctx context.Context, params *components.GetBalancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBalancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBeneficiariesResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBeneficiariesResponseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeeInfo(ctx context.Context, params *components.GetFeeInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeeInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFundingAddress(ctx context.Context, params *components.GetFundingAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFundingAddressRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFundingAddress(ctx context.Context, params *components.CreateFundingAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFundingAddressRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrders(ctx context.Context, params *components.ListOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrdersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUserTrades(ctx context.Context, params *components.ListUserTradesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUserTradesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMarketOrder(ctx context.Context, params *components.PostMarketOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMarketOrderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrderBookFull(ctx context.Context, params *components.GetOrderBookFullParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrderBookFullRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrderBook(ctx context.Context, params *components.GetOrderBookParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrderBookRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrder(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrderRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLimitOrder(ctx context.Context, params *components.PostLimitOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLimitOrderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Send(ctx context.Context, params *components.SendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendFee(ctx context.Context, params *components.SendFeeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendFeeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopOrder(ctx context.Context, params *components.StopOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopOrderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTicker(ctx context.Context, params *components.GetTickerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTickerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTickers(ctx context.Context, params *components.GetTickersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTickersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTrades(ctx context.Context, params *components.ListTradesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTradesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWithdrawals(ctx context.Context, params *components.ListWithdrawalsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWithdrawalsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWithdrawal(ctx context.Context, params *components.CreateWithdrawalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWithdrawalRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelWithdrawal(ctx context.Context, iD int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelWithdrawalRequest(c.Server, iD)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWithdrawal(ctx context.Context, iD int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWithdrawalRequest(c.Server, iD)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCandles(ctx context.Context, params *components.GetCandlesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCandlesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Markets(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMove(ctx context.Context, params *components.GetMoveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMoveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Move(ctx context.Context, params *components.MoveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMoveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMoves(ctx context.Context, params *components.ListMovesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMovesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTransfers(ctx context.Context, params *components.ListTransfersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTransfersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrdersV2(ctx context.Context, params *components.ListOrdersV2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrdersV2Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrderV2(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrderV2Request(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrderV3(ctx context.Context, params *components.GetOrderV3Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrderV3Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateAccountRequest generates requests for CreateAccount
func NewCreateAccountRequest(server string, params *components.CreateAccountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "currency", runtime.ParamLocationQuery, params.Currency); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAccountNameRequest generates requests for UpdateAccountName
func NewUpdateAccountNameRequest(server string, iD int64, params *components.UpdateAccountNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, iD)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/accounts/%s/name", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPendingTransactionsRequest generates requests for ListPendingTransactions
func NewListPendingTransactionsRequest(server string, iD int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, iD)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/accounts/%s/pending", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListTransactionsRequest generates requests for ListTransactions
func NewListTransactionsRequest(server string, iD int64, params *components.ListTransactionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, iD)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/accounts/%s/transactions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_row", runtime.ParamLocationQuery, params.MinRow); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_row", runtime.ParamLocationQuery, params.MaxRow); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBalancesRequest generates requests for GetBalances
func NewGetBalancesRequest(server string, params *components.GetBalancesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/balance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Assets != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "assets", runtime.ParamLocationQuery, *params.Assets); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListBeneficiariesResponseRequest generates requests for ListBeneficiariesResponse
func NewListBeneficiariesResponseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/beneficiaries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeeInfoRequest generates requests for GetFeeInfo
func NewGetFeeInfoRequest(server string, params *components.GetFeeInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/fee_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pair", runtime.ParamLocationQuery, params.Pair); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFundingAddressRequest generates requests for GetFundingAddress
func NewGetFundingAddressRequest(server string, params *components.GetFundingAddressParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/funding_address")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asset", runtime.ParamLocationQuery, params.Asset); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Address != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address", runtime.ParamLocationQuery, *params.Address); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFundingAddressRequest generates requests for CreateFundingAddress
func NewCreateFundingAddressRequest(server string, params *components.CreateFundingAddressParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/funding_address")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asset", runtime.ParamLocationQuery, params.Asset); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Name != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrdersRequest generates requests for ListOrders
func NewListOrdersRequest(server string, params *components.ListOrdersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/listorders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.OrderState != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.OrderState); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pair != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pair", runtime.ParamLocationQuery, *params.Pair); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_before", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUserTradesRequest generates requests for ListUserTrades
func NewListUserTradesRequest(server string, params *components.ListUserTradesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/listtrades")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pair", runtime.ParamLocationQuery, params.Pair); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Since != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, *params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AfterSeq != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after_seq", runtime.ParamLocationQuery, *params.AfterSeq); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.BeforeSeq != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before_seq", runtime.ParamLocationQuery, *params.BeforeSeq); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDesc != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_desc", runtime.ParamLocationQuery, *params.SortDesc); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMarketOrderRequest generates requests for PostMarketOrder
func NewPostMarketOrderRequest(server string, params *components.PostMarketOrderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/marketorder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pair", runtime.ParamLocationQuery, params.Pair); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.OrderType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.CounterVolume != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "counter_volume", runtime.ParamLocationQuery, *params.CounterVolume); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.BaseVolume != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "base_volume", runtime.ParamLocationQuery, *params.BaseVolume); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.BaseAccountID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "base_account_id", runtime.ParamLocationQuery, *params.BaseAccountID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CounterAccountID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "counter_account_id", runtime.ParamLocationQuery, *params.CounterAccountID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Timestamp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp", runtime.ParamLocationQuery, *params.Timestamp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TTL != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.TTL); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClientOrderID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_order_id", runtime.ParamLocationQuery, *params.ClientOrderID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrderBookFullRequest generates requests for GetOrderBookFull
func NewGetOrderBookFullRequest(server string, params *components.GetOrderBookFullParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/orderbook")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pair", runtime.ParamLocationQuery, params.Pair); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrderBookRequest generates requests for GetOrderBook
func NewGetOrderBookRequest(server string, params *components.GetOrderBookParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/orderbook_top")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pair", runtime.ParamLocationQuery, params.Pair); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrderRequest generates requests for GetOrder
func NewGetOrderRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/orders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLimitOrderRequest generates requests for PostLimitOrder
func NewPostLimitOrderRequest(server string, params *components.PostLimitOrderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/postorder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pair", runtime.ParamLocationQuery, params.Pair); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.OrderType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.TimeInForce != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_in_force", runtime.ParamLocationQuery, *params.TimeInForce); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PostOnly != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "post_only", runtime.ParamLocationQuery, *params.PostOnly); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "volume", runtime.ParamLocationQuery, params.Volume); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "price", runtime.ParamLocationQuery, params.Price); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.StopPrice != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stop_price", runtime.ParamLocationQuery, *params.StopPrice); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StopDirection != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stop_direction", runtime.ParamLocationQuery, *params.StopDirection); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.BaseAccountID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "base_account_id", runtime.ParamLocationQuery, *params.BaseAccountID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CounterAccountID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "counter_account_id", runtime.ParamLocationQuery, *params.CounterAccountID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Timestamp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp", runtime.ParamLocationQuery, *params.Timestamp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TTL != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ttl", runtime.ParamLocationQuery, *params.TTL); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClientOrderID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_order_id", runtime.ParamLocationQuery, *params.ClientOrderID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSendRequest generates requests for Send
func NewSendRequest(server string, params *components.SendParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/send")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, params.Amount); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "currency", runtime.ParamLocationQuery, params.Currency); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address", runtime.ParamLocationQuery, params.Address); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Description != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Message != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "message", runtime.ParamLocationQuery, *params.Message); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExternalID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id", runtime.ParamLocationQuery, *params.ExternalID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HasDestinationTag != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "has_destination_tag", runtime.ParamLocationQuery, *params.HasDestinationTag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DestinationTag != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "destination_tag", runtime.ParamLocationQuery, *params.DestinationTag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSendFeeRequest generates requests for SendFee
func NewSendFeeRequest(server string, params *components.SendFeeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/send_fee")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, params.Amount); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "currency", runtime.ParamLocationQuery, params.Currency); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "address", runtime.ParamLocationQuery, params.Address); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStopOrderRequest generates requests for StopOrder
func NewStopOrderRequest(server string, params *components.StopOrderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/stoporder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_id", runtime.ParamLocationQuery, params.OrderID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTickerRequest generates requests for GetTicker
func NewGetTickerRequest(server string, params *components.GetTickerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/ticker")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pair", runtime.ParamLocationQuery, params.Pair); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTickersRequest generates requests for GetTickers
func NewGetTickersRequest(server string, params *components.GetTickersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/tickers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pair != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pair", runtime.ParamLocationQuery, *params.Pair); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListTradesRequest generates requests for ListTrades
func NewListTradesRequest(server string, params *components.ListTradesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/trades")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pair", runtime.ParamLocationQuery, params.Pair); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Since != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, *params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListWithdrawalsRequest generates requests for ListWithdrawals
func NewListWithdrawalsRequest(server string, params *components.ListWithdrawalsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/withdrawals")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.BeforeID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before_id", runtime.ParamLocationQuery, *params.BeforeID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWithdrawalRequest generates requests for CreateWithdrawal
func NewCreateWithdrawalRequest(server string, params *components.CreateWithdrawalParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/withdrawals")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, params.Amount); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.BeneficiaryID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "beneficiary_id", runtime.ParamLocationQuery, *params.BeneficiaryID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Fast != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fast", runtime.ParamLocationQuery, *params.Fast); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Reference != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExternalID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id", runtime.ParamLocationQuery, *params.ExternalID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelWithdrawalRequest generates requests for CancelWithdrawal
func NewCancelWithdrawalRequest(server string, iD int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, iD)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/withdrawals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWithdrawalRequest generates requests for GetWithdrawal
func NewGetWithdrawalRequest(server string, iD int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, iD)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/1/withdrawals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCandlesRequest generates requests for GetCandles
func NewGetCandlesRequest(server string, params *components.GetCandlesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/exchange/1/candles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pair", runtime.ParamLocationQuery, params.Pair); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, params.Since); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration", runtime.ParamLocationQuery, params.Duration); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketsRequest generates requests for Markets
func NewMarketsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/exchange/1/markets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMoveRequest generates requests for GetMove
func NewGetMoveRequest(server string, params *components.GetMoveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/exchange/1/move")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.ID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClientMoveID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_move_id", runtime.ParamLocationQuery, *params.ClientMoveID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMoveRequest generates requests for Move
func NewMoveRequest(server string, params *components.MoveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/exchange/1/move")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, params.Amount); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "debit_account_id", runtime.ParamLocationQuery, params.DebitAccountID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "credit_account_id", runtime.ParamLocationQuery, params.CreditAccountID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.ClientMoveID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_move_id", runtime.ParamLocationQuery, *params.ClientMoveID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListMovesRequest generates requests for ListMoves
func NewListMovesRequest(server string, params *components.ListMovesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/exchange/1/move/list_moves")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListTransfersRequest generates requests for ListTransfers
func NewListTransfersRequest(server string, params *components.ListTransfersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/exchange/1/transfers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account_id", runtime.ParamLocationQuery, params.AccountID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrdersV2Request generates requests for ListOrdersV2
func NewListOrdersV2Request(server string, params *components.ListOrdersV2Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/exchange/2/listorders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Pair != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pair", runtime.ParamLocationQuery, *params.Pair); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Closed != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "closed", runtime.ParamLocationQuery, *params.Closed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_before", runtime.ParamLocationQuery, *params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrderV2Request generates requests for GetOrderV2
func NewGetOrderV2Request(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/exchange/2/orders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrderV3Request generates requests for GetOrderV3
func NewGetOrderV3Request(server string, params *components.GetOrderV3Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/exchange/3/order")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Ref != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Ref); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClientOrderID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_order_id", runtime.ParamLocationQuery, *params.ClientOrderID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateAccount request
	CreateAccountWithResponse(ctx context.Context, params *components.CreateAccountParams, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error)

	// UpdateAccountName request
	UpdateAccountNameWithResponse(ctx context.Context, iD int64, params *components.UpdateAccountNameParams, reqEditors ...RequestEditorFn) (*UpdateAccountNameResponse, error)

	// ListPendingTransactions request
	ListPendingTransactionsWithResponse(ctx context.Context, iD int64, reqEditors ...RequestEditorFn) (*ListPendingTransactionsResponse, error)

	// ListTransactions request
	ListTransactionsWithResponse(ctx context.Context, iD int64, params *components.ListTransactionsParams, reqEditors ...RequestEditorFn) (*ListTransactionsResponse, error)

	// GetBalances request
	GetBalancesWithResponse(ctx context.Context, params *components.GetBalancesParams, reqEditors ...RequestEditorFn) (*GetBalancesResponse, error)

	// ListBeneficiariesResponse request
	ListBeneficiariesResponseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListBeneficiariesResponseResponse, error)

	// GetFeeInfo request
	GetFeeInfoWithResponse(ctx context.Context, params *components.GetFeeInfoParams, reqEditors ...RequestEditorFn) (*GetFeeInfoResponse, error)

	// GetFundingAddress request
	GetFundingAddressWithResponse(ctx context.Context, params *components.GetFundingAddressParams, reqEditors ...RequestEditorFn) (*GetFundingAddressResponse, error)

	// CreateFundingAddress request
	CreateFundingAddressWithResponse(ctx context.Context, params *components.CreateFundingAddressParams, reqEditors ...RequestEditorFn) (*CreateFundingAddressResponse, error)

	// ListOrders request
	ListOrdersWithResponse(ctx context.Context, params *components.ListOrdersParams, reqEditors ...RequestEditorFn) (*ListOrdersResponse, error)

	// ListUserTrades request
	ListUserTradesWithResponse(ctx context.Context, params *components.ListUserTradesParams, reqEditors ...RequestEditorFn) (*ListUserTradesResponse, error)

	// PostMarketOrder request
	PostMarketOrderWithResponse(ctx context.Context, params *components.PostMarketOrderParams, reqEditors ...RequestEditorFn) (*PostMarketOrderResponse, error)

	// GetOrderBookFull request
	GetOrderBookFullWithResponse(ctx context.Context, params *components.GetOrderBookFullParams, reqEditors ...RequestEditorFn) (*GetOrderBookFullResponse, error)

	// GetOrderBook request
	GetOrderBookWithResponse(ctx context.Context, params *components.GetOrderBookParams, reqEditors ...RequestEditorFn) (*GetOrderBookResponse, error)

	// GetOrder request
	GetOrderWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetOrderResponse, error)

	// PostLimitOrder request
	PostLimitOrderWithResponse(ctx context.Context, params *components.PostLimitOrderParams, reqEditors ...RequestEditorFn) (*PostLimitOrderResponse, error)

	// Send request
	SendWithResponse(ctx context.Context, params *components.SendParams, reqEditors ...RequestEditorFn) (*SendResponse, error)

	// SendFee request
	SendFeeWithResponse(ctx context.Context, params *components.SendFeeParams, reqEditors ...RequestEditorFn) (*SendFeeResponse, error)

	// StopOrder request
	StopOrderWithResponse(ctx context.Context, params *components.StopOrderParams, reqEditors ...RequestEditorFn) (*StopOrderResponse, error)

	// GetTicker request
	GetTickerWithResponse(ctx context.Context, params *components.GetTickerParams, reqEditors ...RequestEditorFn) (*GetTickerResponse, error)

	// GetTickers request
	GetTickersWithResponse(ctx context.Context, params *components.GetTickersParams, reqEditors ...RequestEditorFn) (*GetTickersResponse, error)

	// ListTrades request
	ListTradesWithResponse(ctx context.Context, params *components.ListTradesParams, reqEditors ...RequestEditorFn) (*ListTradesResponse, error)

	// ListWithdrawals request
	ListWithdrawalsWithResponse(ctx context.Context, params *components.ListWithdrawalsParams, reqEditors ...RequestEditorFn) (*ListWithdrawalsResponse, error)

	// CreateWithdrawal request
	CreateWithdrawalWithResponse(ctx context.Context, params *components.CreateWithdrawalParams, reqEditors ...RequestEditorFn) (*CreateWithdrawalResponse, error)

	// CancelWithdrawal request
	CancelWithdrawalWithResponse(ctx context.Context, iD int64, reqEditors ...RequestEditorFn) (*CancelWithdrawalResponse, error)

	// GetWithdrawal request
	GetWithdrawalWithResponse(ctx context.Context, iD int64, reqEditors ...RequestEditorFn) (*GetWithdrawalResponse, error)

	// GetCandles request
	GetCandlesWithResponse(ctx context.Context, params *components.GetCandlesParams, reqEditors ...RequestEditorFn) (*GetCandlesResponse, error)

	// Markets request
	MarketsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MarketsResponse, error)

	// GetMove request
	GetMoveWithResponse(ctx context.Context, params *components.GetMoveParams, reqEditors ...RequestEditorFn) (*GetMoveResponse, error)

	// Move request
	MoveWithResponse(ctx context.Context, params *components.MoveParams, reqEditors ...RequestEditorFn) (*MoveResponse, error)

	// ListMoves request
	ListMovesWithResponse(ctx context.Context, params *components.ListMovesParams, reqEditors ...RequestEditorFn) (*ListMovesResponse, error)

	// ListTransfers request
	ListTransfersWithResponse(ctx context.Context, params *components.ListTransfersParams, reqEditors ...RequestEditorFn) (*ListTransfersResponse, error)

	// ListOrdersV2 request
	ListOrdersV2WithResponse(ctx context.Context, params *components.ListOrdersV2Params, reqEditors ...RequestEditorFn) (*ListOrdersV2Response, error)

	// GetOrderV2 request
	GetOrderV2WithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetOrderV2Response, error)

	// GetOrderV3 request
	GetOrderV3WithResponse(ctx context.Context, params *components.GetOrderV3Params, reqEditors ...RequestEditorFn) (*GetOrderV3Response, error)
}

type CreateAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.CreateAccountResponse
}

// Status returns HTTPResponse.Status
func (r CreateAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAccountNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.UpdateAccountNameResponse
}

// Status returns HTTPResponse.Status
func (r UpdateAccountNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAccountNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPendingTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.ListPendingTransactionsResponse
}

// Status returns HTTPResponse.Status
func (r ListPendingTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPendingTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.ListTransactionsResponse
}

// Status returns HTTPResponse.Status
func (r ListTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBalancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.GetBalancesResponse
}

// Status returns HTTPResponse.Status
func (r GetBalancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBalancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBeneficiariesResponseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.ListBeneficiariesResponse
}

// Status returns HTTPResponse.Status
func (r ListBeneficiariesResponseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBeneficiariesResponseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeeInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.GetFeeInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetFeeInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeeInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFundingAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.GetFundingAddressResponse
}

// Status returns HTTPResponse.Status
func (r GetFundingAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFundingAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFundingAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.CreateFundingAddressResponse
}

// Status returns HTTPResponse.Status
func (r CreateFundingAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFundingAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.ListOrdersResponse
}

// Status returns HTTPResponse.Status
func (r ListOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUserTradesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.ListUserTradesResponse
}

// Status returns HTTPResponse.Status
func (r ListUserTradesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUserTradesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMarketOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.PostMarketOrderResponse
}

// Status returns HTTPResponse.Status
func (r PostMarketOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMarketOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrderBookFullResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.GetOrderBookResponse
	JSONDefault  *struct {
		// Unique error reference
		Code *string `json:"code,omitempty"`

		// Verbose error message
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOrderBookFullResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrderBookFullResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrderBookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.GetOrderBookResponse
	JSONDefault  *struct {
		// Unique error reference
		Code *string `json:"code,omitempty"`

		// Verbose error message
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOrderBookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrderBookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.GetOrderResponse
}

// Status returns HTTPResponse.Status
func (r GetOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLimitOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.PostLimitOrderResponse
}

// Status returns HTTPResponse.Status
func (r PostLimitOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLimitOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.SendResponse
}

// Status returns HTTPResponse.Status
func (r SendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendFeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.SendFeeResponse
}

// Status returns HTTPResponse.Status
func (r SendFeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendFeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.StopOrderResponse
}

// Status returns HTTPResponse.Status
func (r StopOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTickerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.GetTickerResponse
	JSONDefault  *struct {
		// Unique error reference
		Code *string `json:"code,omitempty"`

		// Verbose error message
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTickerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTickerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTickersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.ListTickersResponse
	JSONDefault  *struct {
		// Unique error reference
		Code *string `json:"code,omitempty"`

		// Verbose error message
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTickersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTickersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTradesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.ListTradesResponse
	JSONDefault  *struct {
		// Unique error reference
		Code *string `json:"code,omitempty"`

		// Verbose error message
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListTradesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTradesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWithdrawalsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.ListWithdrawalsResponse
}

// Status returns HTTPResponse.Status
func (r ListWithdrawalsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWithdrawalsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWithdrawalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.CreateWithdrawalResponse
}

// Status returns HTTPResponse.Status
func (r CreateWithdrawalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWithdrawalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelWithdrawalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.CancelWithdrawalResponse
}

// Status returns HTTPResponse.Status
func (r CancelWithdrawalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelWithdrawalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWithdrawalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.GetWithdrawalResponse
}

// Status returns HTTPResponse.Status
func (r GetWithdrawalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWithdrawalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCandlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.GetCandlesResponse
	JSONDefault  *struct {
		// Unique error reference
		Code *string `json:"code,omitempty"`

		// Verbose error message
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCandlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCandlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.MarketsInfoResponse
	JSONDefault  *struct {
		// Unique error reference
		Code *string `json:"code,omitempty"`

		// Verbose error message
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r MarketsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.GetMoveResponse
	JSONDefault  *struct {
		// Unique error reference
		Code *string `json:"code,omitempty"`

		// Verbose error message
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.MoveResponse
	JSONDefault  *struct {
		// Unique error reference
		Code *string `json:"code,omitempty"`

		// Verbose error message
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r MoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMovesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.ListMovesResponse
	JSONDefault  *struct {
		// Unique error reference
		Code *string `json:"code,omitempty"`

		// Verbose error message
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListMovesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMovesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTransfersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.ListTransfersResponse
	JSONDefault  *struct {
		// Unique error reference
		Code *string `json:"code,omitempty"`

		// Verbose error message
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListTransfersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTransfersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrdersV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.ListOrders2Response
	JSONDefault  *struct {
		// Unique error reference
		Code *string `json:"code,omitempty"`

		// Verbose error message
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListOrdersV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrdersV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrderV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.GetOrder2Response
	JSONDefault  *struct {
		// Unique error reference
		Code *string `json:"code,omitempty"`

		// Verbose error message
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOrderV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrderV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrderV3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *components.GetOrder2Response
	JSONDefault  *struct {
		// Unique error reference
		Code *string `json:"code,omitempty"`

		// Verbose error message
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOrderV3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrderV3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateAccountWithResponse request returning *CreateAccountResponse
func (c *ClientWithResponses) CreateAccountWithResponse(ctx context.Context, params *components.CreateAccountParams, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error) {
	rsp, err := c.CreateAccount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountResponse(rsp)
}

// UpdateAccountNameWithResponse request returning *UpdateAccountNameResponse
func (c *ClientWithResponses) UpdateAccountNameWithResponse(ctx context.Context, iD int64, params *components.UpdateAccountNameParams, reqEditors ...RequestEditorFn) (*UpdateAccountNameResponse, error) {
	rsp, err := c.UpdateAccountName(ctx, iD, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountNameResponse(rsp)
}

// ListPendingTransactionsWithResponse request returning *ListPendingTransactionsResponse
func (c *ClientWithResponses) ListPendingTransactionsWithResponse(ctx context.Context, iD int64, reqEditors ...RequestEditorFn) (*ListPendingTransactionsResponse, error) {
	rsp, err := c.ListPendingTransactions(ctx, iD, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPendingTransactionsResponse(rsp)
}

// ListTransactionsWithResponse request returning *ListTransactionsResponse
func (c *ClientWithResponses) ListTransactionsWithResponse(ctx context.Context, iD int64, params *components.ListTransactionsParams, reqEditors ...RequestEditorFn) (*ListTransactionsResponse, error) {
	rsp, err := c.ListTransactions(ctx, iD, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTransactionsResponse(rsp)
}

// GetBalancesWithResponse request returning *GetBalancesResponse
func (c *ClientWithResponses) GetBalancesWithResponse(ctx context.Context, params *components.GetBalancesParams, reqEditors ...RequestEditorFn) (*GetBalancesResponse, error) {
	rsp, err := c.GetBalances(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBalancesResponse(rsp)
}

// ListBeneficiariesResponseWithResponse request returning *ListBeneficiariesResponseResponse
func (c *ClientWithResponses) ListBeneficiariesResponseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListBeneficiariesResponseResponse, error) {
	rsp, err := c.ListBeneficiariesResponse(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBeneficiariesResponseResponse(rsp)
}

// GetFeeInfoWithResponse request returning *GetFeeInfoResponse
func (c *ClientWithResponses) GetFeeInfoWithResponse(ctx context.Context, params *components.GetFeeInfoParams, reqEditors ...RequestEditorFn) (*GetFeeInfoResponse, error) {
	rsp, err := c.GetFeeInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeeInfoResponse(rsp)
}

// GetFundingAddressWithResponse request returning *GetFundingAddressResponse
func (c *ClientWithResponses) GetFundingAddressWithResponse(ctx context.Context, params *components.GetFundingAddressParams, reqEditors ...RequestEditorFn) (*GetFundingAddressResponse, error) {
	rsp, err := c.GetFundingAddress(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFundingAddressResponse(rsp)
}

// CreateFundingAddressWithResponse request returning *CreateFundingAddressResponse
func (c *ClientWithResponses) CreateFundingAddressWithResponse(ctx context.Context, params *components.CreateFundingAddressParams, reqEditors ...RequestEditorFn) (*CreateFundingAddressResponse, error) {
	rsp, err := c.CreateFundingAddress(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFundingAddressResponse(rsp)
}

// ListOrdersWithResponse request returning *ListOrdersResponse
func (c *ClientWithResponses) ListOrdersWithResponse(ctx context.Context, params *components.ListOrdersParams, reqEditors ...RequestEditorFn) (*ListOrdersResponse, error) {
	rsp, err := c.ListOrders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrdersResponse(rsp)
}

// ListUserTradesWithResponse request returning *ListUserTradesResponse
func (c *ClientWithResponses) ListUserTradesWithResponse(ctx context.Context, params *components.ListUserTradesParams, reqEditors ...RequestEditorFn) (*ListUserTradesResponse, error) {
	rsp, err := c.ListUserTrades(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUserTradesResponse(rsp)
}

// PostMarketOrderWithResponse request returning *PostMarketOrderResponse
func (c *ClientWithResponses) PostMarketOrderWithResponse(ctx context.Context, params *components.PostMarketOrderParams, reqEditors ...RequestEditorFn) (*PostMarketOrderResponse, error) {
	rsp, err := c.PostMarketOrder(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMarketOrderResponse(rsp)
}

// GetOrderBookFullWithResponse request returning *GetOrderBookFullResponse
func (c *ClientWithResponses) GetOrderBookFullWithResponse(ctx context.Context, params *components.GetOrderBookFullParams, reqEditors ...RequestEditorFn) (*GetOrderBookFullResponse, error) {
	rsp, err := c.GetOrderBookFull(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrderBookFullResponse(rsp)
}

// GetOrderBookWithResponse request returning *GetOrderBookResponse
func (c *ClientWithResponses) GetOrderBookWithResponse(ctx context.Context, params *components.GetOrderBookParams, reqEditors ...RequestEditorFn) (*GetOrderBookResponse, error) {
	rsp, err := c.GetOrderBook(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrderBookResponse(rsp)
}

// GetOrderWithResponse request returning *GetOrderResponse
func (c *ClientWithResponses) GetOrderWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetOrderResponse, error) {
	rsp, err := c.GetOrder(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrderResponse(rsp)
}

// PostLimitOrderWithResponse request returning *PostLimitOrderResponse
func (c *ClientWithResponses) PostLimitOrderWithResponse(ctx context.Context, params *components.PostLimitOrderParams, reqEditors ...RequestEditorFn) (*PostLimitOrderResponse, error) {
	rsp, err := c.PostLimitOrder(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLimitOrderResponse(rsp)
}

// SendWithResponse request returning *SendResponse
func (c *ClientWithResponses) SendWithResponse(ctx context.Context, params *components.SendParams, reqEditors ...RequestEditorFn) (*SendResponse, error) {
	rsp, err := c.Send(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendResponse(rsp)
}

// SendFeeWithResponse request returning *SendFeeResponse
func (c *ClientWithResponses) SendFeeWithResponse(ctx context.Context, params *components.SendFeeParams, reqEditors ...RequestEditorFn) (*SendFeeResponse, error) {
	rsp, err := c.SendFee(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendFeeResponse(rsp)
}

// StopOrderWithResponse request returning *StopOrderResponse
func (c *ClientWithResponses) StopOrderWithResponse(ctx context.Context, params *components.StopOrderParams, reqEditors ...RequestEditorFn) (*StopOrderResponse, error) {
	rsp, err := c.StopOrder(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopOrderResponse(rsp)
}

// GetTickerWithResponse request returning *GetTickerResponse
func (c *ClientWithResponses) GetTickerWithResponse(ctx context.Context, params *components.GetTickerParams, reqEditors ...RequestEditorFn) (*GetTickerResponse, error) {
	rsp, err := c.GetTicker(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTickerResponse(rsp)
}

// GetTickersWithResponse request returning *GetTickersResponse
func (c *ClientWithResponses) GetTickersWithResponse(ctx context.Context, params *components.GetTickersParams, reqEditors ...RequestEditorFn) (*GetTickersResponse, error) {
	rsp, err := c.GetTickers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTickersResponse(rsp)
}

// ListTradesWithResponse request returning *ListTradesResponse
func (c *ClientWithResponses) ListTradesWithResponse(ctx context.Context, params *components.ListTradesParams, reqEditors ...RequestEditorFn) (*ListTradesResponse, error) {
	rsp, err := c.ListTrades(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTradesResponse(rsp)
}

// ListWithdrawalsWithResponse request returning *ListWithdrawalsResponse
func (c *ClientWithResponses) ListWithdrawalsWithResponse(ctx context.Context, params *components.ListWithdrawalsParams, reqEditors ...RequestEditorFn) (*ListWithdrawalsResponse, error) {
	rsp, err := c.ListWithdrawals(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWithdrawalsResponse(rsp)
}

// CreateWithdrawalWithResponse request returning *CreateWithdrawalResponse
func (c *ClientWithResponses) CreateWithdrawalWithResponse(ctx context.Context, params *components.CreateWithdrawalParams, reqEditors ...RequestEditorFn) (*CreateWithdrawalResponse, error) {
	rsp, err := c.CreateWithdrawal(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWithdrawalResponse(rsp)
}

// CancelWithdrawalWithResponse request returning *CancelWithdrawalResponse
func (c *ClientWithResponses) CancelWithdrawalWithResponse(ctx context.Context, iD int64, reqEditors ...RequestEditorFn) (*CancelWithdrawalResponse, error) {
	rsp, err := c.CancelWithdrawal(ctx, iD, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelWithdrawalResponse(rsp)
}

// GetWithdrawalWithResponse request returning *GetWithdrawalResponse
func (c *ClientWithResponses) GetWithdrawalWithResponse(ctx context.Context, iD int64, reqEditors ...RequestEditorFn) (*GetWithdrawalResponse, error) {
	rsp, err := c.GetWithdrawal(ctx, iD, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWithdrawalResponse(rsp)
}

// GetCandlesWithResponse request returning *GetCandlesResponse
func (c *ClientWithResponses) GetCandlesWithResponse(ctx context.Context, params *components.GetCandlesParams, reqEditors ...RequestEditorFn) (*GetCandlesResponse, error) {
	rsp, err := c.GetCandles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCandlesResponse(rsp)
}

// MarketsWithResponse request returning *MarketsResponse
func (c *ClientWithResponses) MarketsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*MarketsResponse, error) {
	rsp, err := c.Markets(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketsResponse(rsp)
}

// GetMoveWithResponse request returning *GetMoveResponse
func (c *ClientWithResponses) GetMoveWithResponse(ctx context.Context, params *components.GetMoveParams, reqEditors ...RequestEditorFn) (*GetMoveResponse, error) {
	rsp, err := c.GetMove(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMoveResponse(rsp)
}

// MoveWithResponse request returning *MoveResponse
func (c *ClientWithResponses) MoveWithResponse(ctx context.Context, params *components.MoveParams, reqEditors ...RequestEditorFn) (*MoveResponse, error) {
	rsp, err := c.Move(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMoveResponse(rsp)
}

// ListMovesWithResponse request returning *ListMovesResponse
func (c *ClientWithResponses) ListMovesWithResponse(ctx context.Context, params *components.ListMovesParams, reqEditors ...RequestEditorFn) (*ListMovesResponse, error) {
	rsp, err := c.ListMoves(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMovesResponse(rsp)
}

// ListTransfersWithResponse request returning *ListTransfersResponse
func (c *ClientWithResponses) ListTransfersWithResponse(ctx context.Context, params *components.ListTransfersParams, reqEditors ...RequestEditorFn) (*ListTransfersResponse, error) {
	rsp, err := c.ListTransfers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTransfersResponse(rsp)
}

// ListOrdersV2WithResponse request returning *ListOrdersV2Response
func (c *ClientWithResponses) ListOrdersV2WithResponse(ctx context.Context, params *components.ListOrdersV2Params, reqEditors ...RequestEditorFn) (*ListOrdersV2Response, error) {
	rsp, err := c.ListOrdersV2(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrdersV2Response(rsp)
}

// GetOrderV2WithResponse request returning *GetOrderV2Response
func (c *ClientWithResponses) GetOrderV2WithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetOrderV2Response, error) {
	rsp, err := c.GetOrderV2(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrderV2Response(rsp)
}

// GetOrderV3WithResponse request returning *GetOrderV3Response
func (c *ClientWithResponses) GetOrderV3WithResponse(ctx context.Context, params *components.GetOrderV3Params, reqEditors ...RequestEditorFn) (*GetOrderV3Response, error) {
	rsp, err := c.GetOrderV3(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrderV3Response(rsp)
}

// ParseCreateAccountResponse parses an HTTP response from a CreateAccountWithResponse call
func ParseCreateAccountResponse(rsp *http.Response) (*CreateAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.CreateAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAccountNameResponse parses an HTTP response from a UpdateAccountNameWithResponse call
func ParseUpdateAccountNameResponse(rsp *http.Response) (*UpdateAccountNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAccountNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.UpdateAccountNameResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPendingTransactionsResponse parses an HTTP response from a ListPendingTransactionsWithResponse call
func ParseListPendingTransactionsResponse(rsp *http.Response) (*ListPendingTransactionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPendingTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.ListPendingTransactionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListTransactionsResponse parses an HTTP response from a ListTransactionsWithResponse call
func ParseListTransactionsResponse(rsp *http.Response) (*ListTransactionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.ListTransactionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBalancesResponse parses an HTTP response from a GetBalancesWithResponse call
func ParseGetBalancesResponse(rsp *http.Response) (*GetBalancesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBalancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.GetBalancesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListBeneficiariesResponseResponse parses an HTTP response from a ListBeneficiariesResponseWithResponse call
func ParseListBeneficiariesResponseResponse(rsp *http.Response) (*ListBeneficiariesResponseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBeneficiariesResponseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.ListBeneficiariesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFeeInfoResponse parses an HTTP response from a GetFeeInfoWithResponse call
func ParseGetFeeInfoResponse(rsp *http.Response) (*GetFeeInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeeInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.GetFeeInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFundingAddressResponse parses an HTTP response from a GetFundingAddressWithResponse call
func ParseGetFundingAddressResponse(rsp *http.Response) (*GetFundingAddressResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFundingAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.GetFundingAddressResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateFundingAddressResponse parses an HTTP response from a CreateFundingAddressWithResponse call
func ParseCreateFundingAddressResponse(rsp *http.Response) (*CreateFundingAddressResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFundingAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.CreateFundingAddressResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListOrdersResponse parses an HTTP response from a ListOrdersWithResponse call
func ParseListOrdersResponse(rsp *http.Response) (*ListOrdersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.ListOrdersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUserTradesResponse parses an HTTP response from a ListUserTradesWithResponse call
func ParseListUserTradesResponse(rsp *http.Response) (*ListUserTradesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUserTradesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.ListUserTradesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMarketOrderResponse parses an HTTP response from a PostMarketOrderWithResponse call
func ParsePostMarketOrderResponse(rsp *http.Response) (*PostMarketOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMarketOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.PostMarketOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrderBookFullResponse parses an HTTP response from a GetOrderBookFullWithResponse call
func ParseGetOrderBookFullResponse(rsp *http.Response) (*GetOrderBookFullResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrderBookFullResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.GetOrderBookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			// Unique error reference
			Code *string `json:"code,omitempty"`

			// Verbose error message
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOrderBookResponse parses an HTTP response from a GetOrderBookWithResponse call
func ParseGetOrderBookResponse(rsp *http.Response) (*GetOrderBookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrderBookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.GetOrderBookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			// Unique error reference
			Code *string `json:"code,omitempty"`

			// Verbose error message
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOrderResponse parses an HTTP response from a GetOrderWithResponse call
func ParseGetOrderResponse(rsp *http.Response) (*GetOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.GetOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostLimitOrderResponse parses an HTTP response from a PostLimitOrderWithResponse call
func ParsePostLimitOrderResponse(rsp *http.Response) (*PostLimitOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLimitOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.PostLimitOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSendResponse parses an HTTP response from a SendWithResponse call
func ParseSendResponse(rsp *http.Response) (*SendResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.SendResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSendFeeResponse parses an HTTP response from a SendFeeWithResponse call
func ParseSendFeeResponse(rsp *http.Response) (*SendFeeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendFeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.SendFeeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStopOrderResponse parses an HTTP response from a StopOrderWithResponse call
func ParseStopOrderResponse(rsp *http.Response) (*StopOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.StopOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTickerResponse parses an HTTP response from a GetTickerWithResponse call
func ParseGetTickerResponse(rsp *http.Response) (*GetTickerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTickerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.GetTickerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			// Unique error reference
			Code *string `json:"code,omitempty"`

			// Verbose error message
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetTickersResponse parses an HTTP response from a GetTickersWithResponse call
func ParseGetTickersResponse(rsp *http.Response) (*GetTickersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTickersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.ListTickersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			// Unique error reference
			Code *string `json:"code,omitempty"`

			// Verbose error message
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListTradesResponse parses an HTTP response from a ListTradesWithResponse call
func ParseListTradesResponse(rsp *http.Response) (*ListTradesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTradesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.ListTradesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			// Unique error reference
			Code *string `json:"code,omitempty"`

			// Verbose error message
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListWithdrawalsResponse parses an HTTP response from a ListWithdrawalsWithResponse call
func ParseListWithdrawalsResponse(rsp *http.Response) (*ListWithdrawalsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWithdrawalsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.ListWithdrawalsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateWithdrawalResponse parses an HTTP response from a CreateWithdrawalWithResponse call
func ParseCreateWithdrawalResponse(rsp *http.Response) (*CreateWithdrawalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWithdrawalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.CreateWithdrawalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCancelWithdrawalResponse parses an HTTP response from a CancelWithdrawalWithResponse call
func ParseCancelWithdrawalResponse(rsp *http.Response) (*CancelWithdrawalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelWithdrawalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.CancelWithdrawalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWithdrawalResponse parses an HTTP response from a GetWithdrawalWithResponse call
func ParseGetWithdrawalResponse(rsp *http.Response) (*GetWithdrawalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWithdrawalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.GetWithdrawalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCandlesResponse parses an HTTP response from a GetCandlesWithResponse call
func ParseGetCandlesResponse(rsp *http.Response) (*GetCandlesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCandlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.GetCandlesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			// Unique error reference
			Code *string `json:"code,omitempty"`

			// Verbose error message
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseMarketsResponse parses an HTTP response from a MarketsWithResponse call
func ParseMarketsResponse(rsp *http.Response) (*MarketsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.MarketsInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			// Unique error reference
			Code *string `json:"code,omitempty"`

			// Verbose error message
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMoveResponse parses an HTTP response from a GetMoveWithResponse call
func ParseGetMoveResponse(rsp *http.Response) (*GetMoveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.GetMoveResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			// Unique error reference
			Code *string `json:"code,omitempty"`

			// Verbose error message
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseMoveResponse parses an HTTP response from a MoveWithResponse call
func ParseMoveResponse(rsp *http.Response) (*MoveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.MoveResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			// Unique error reference
			Code *string `json:"code,omitempty"`

			// Verbose error message
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListMovesResponse parses an HTTP response from a ListMovesWithResponse call
func ParseListMovesResponse(rsp *http.Response) (*ListMovesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMovesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.ListMovesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			// Unique error reference
			Code *string `json:"code,omitempty"`

			// Verbose error message
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListTransfersResponse parses an HTTP response from a ListTransfersWithResponse call
func ParseListTransfersResponse(rsp *http.Response) (*ListTransfersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTransfersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.ListTransfersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			// Unique error reference
			Code *string `json:"code,omitempty"`

			// Verbose error message
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseListOrdersV2Response parses an HTTP response from a ListOrdersV2WithResponse call
func ParseListOrdersV2Response(rsp *http.Response) (*ListOrdersV2Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrdersV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.ListOrders2Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			// Unique error reference
			Code *string `json:"code,omitempty"`

			// Verbose error message
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOrderV2Response parses an HTTP response from a GetOrderV2WithResponse call
func ParseGetOrderV2Response(rsp *http.Response) (*GetOrderV2Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrderV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.GetOrder2Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			// Unique error reference
			Code *string `json:"code,omitempty"`

			// Verbose error message
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetOrderV3Response parses an HTTP response from a GetOrderV3WithResponse call
func ParseGetOrderV3Response(rsp *http.Response) (*GetOrderV3Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrderV3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest components.GetOrder2Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			// Unique error reference
			Code *string `json:"code,omitempty"`

			// Verbose error message
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
